//---------------------------------------------------------------------------

#include <System.hpp>

#pragma hdrstop

#include "Data.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)

#define ARRAY_LENGTH(a)  (sizeof(a) / sizeof(a[0]))

static Key g_keysClassic[] = {
	{ 49, "AA", 1, 1, 1, 1, 0, 0, "", "", "1" },
	{ 50, "UU", 1, 1, 1, 1, 0, 0, "", "", "2" },
	{ 51, "OO", 1, 1, 0, 1, 0, 0, "", "", "3" },
	{ 52, "EE", 1, 1, 0, 1, 0, 0, "", "", "4" },
	{ 53, "EU", 1, 1, 0, 1, 0, 0, "", "", "5" },
	{ 54, "AU", 1, 1, 0, 1, 0, 0, "", "", "6" },
	{ 55, "UI", 1, 1, 0, 1, 0, 0, "", "", "7" },
	{ 56, "IE", 1, 1, 0, 1, 0, 0, "", "", "8" },
	{ 57, "OE", 1, 1, 1, 1, 0, 0, "", "", "9" },
	{ 48, "EI", 1, 1, 1, 1, 0, 0, "", "", "0" },
	{ 219, "OU", 1, 1, 0, 0, 0, 0, "", "", "" },
	{ 221, "IJ", 1, 1, 0, 1, 0, 0, "", "", "IJ" },
	{ 186, "NG", 1, 1, 0, 0, 0, 0, "", "", "" },
	{ 189, "EUR", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 191, "OOR", 1, 1, 1, 0, 0, 0, "", "", "" },
	{ 220, "CH", 1, 1, 0, 1, 0, 0, "", "", "SJ" },
	{ 165, "EER", 1, 1, 0, 0, 1, 1, "", "", "" },
	{ 222, "NK", 1, 1, 1, 1, 0, 0, "", "", "" },
	{ 187, "SCH", 1, 1, 1, 1, 0, 0, "", "", "" },
	{ 45, "AAI", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 36, "OOI", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 33, "OEI", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 46, "EEUW", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 35, "IEUW", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 34, "UW", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 65, "A", 1, 0, 1, 1, 1,1, "A", "AA", "" },
	{ 66, "B", 0, 0, 0, 0, 0,0, "B", "", "" },
	{ 67, "C", 1, 1, 1, 1, 0,0, "C", "", "K" },
	{ 68, "D", 1, 1, 1, 1, 0,0, "D", "", "" },
	{ 69, "E", 1, 1, 1, 1, 1,1, "E", "EE", "U" },
	{ 70, "F", 0, 0, 0, 0, 0,0, "F", "", "" },
	{ 71, "G", 0, 0, 0, 0, 0,0, "G", "", "" },
	{ 72, "H", 0, 0, 0, 0, 0,0, "H", "", "" },
	{ 73, "I", 1, 1, 1, 1, 1,1, "I", "IE", "I" },
	{ 74, "J", 0, 0, 0, 0, 0,0, "J", "", "" },
	{ 75, "K", 0, 0, 0, 0, 0,0, "K", "", "" },
	{ 76, "L", 0, 0, 0, 0, 0,0, "L", "", "" },
	{ 77, "M", 0, 0, 0, 0, 0,0, "M", "", "" },
	{ 78, "N", 0, 0, 0, 0, 0,0, "N", "", "" },
	{ 79, "O", 1, 1, 1, 0, 1,1, "O", "OO", "" },
	{ 80, "P", 0, 0, 0, 0, 0,0, "P", "", "" },
	{ 81, "Q", 0, 0, 0, 0, 0,0, "Q", "", "" },
	{ 82, "R", 0, 0, 0, 0, 0,0, "R", "", "" },
	{ 83, "S", 0, 0, 0, 0, 0,0, "S", "", "" },
	{ 84, "T", 0, 0, 0, 0, 0,0, "T", "", "" },
	{ 85, "U", 1, 1, 1, 0, 1,1, "U", "UU", "" },
	{ 86, "V", 0, 0, 0, 0, 0,0, "V", "", "" },
	{ 87, "W", 0, 0, 0, 0, 0,0, "W", "", "" },
	{ 88, "X", 0, 0, 0, 0, 0,0, "X", "", "" },
	{ 89, "Y", 1, 1, 1, 1, 0,0, "Y", "", "I" },
	{ 90, "Z", 0, 0, 0, 0, 0,0, "Z", "", "" },
};

static Key g_keysCover[] = {
	{ 49, "AA", 1, 1, 1, 1, 0, 0, "", "", "1" },
	{ 50, "EE", 1, 1, 1, 1, 0, 0, "", "", "2" },
	{ 51, "OO", 1, 1, 0, 1, 0, 0, "", "", "3" },
	{ 52, "UU", 1, 1, 0, 1, 0, 0, "", "", "4" },
	{ 53, "AU", 1, 1, 0, 1, 0, 0, "", "", "5" },
	{ 54, "EI", 1, 1, 0, 1, 0, 0, "", "", "6" },
	{ 55, "EU", 1, 1, 0, 1, 0, 0, "", "", "7" },
	{ 56, "IE", 1, 1, 0, 1, 0, 0, "", "", "8" },
	{ 57, "IJ", 1, 1, 1, 1, 0, 0, "", "", "9" },
	{ 48, "OE", 1, 1, 1, 1, 0, 0, "", "", "0" },
	{ 219, "OU", 1, 1, 0, 0, 0, 0, "", "", "" },
	{ 221, "UI", 1, 1, 0, 0, 0, 0, "", "", "" },
	{ 186, "NG", 1, 1, 0, 0, 0, 0, "", "", "" },
	{ 189, "EUR", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 191, "OOR", 1, 1, 1, 0, 0, 0, "", "", "" },
	{ 220, "CH", 1, 1, 0, 1, 0, 0, "", "", "SJ" },
	{ 165, "EER", 1, 1, 0, 0, 1, 1, "", "", "" },
	{ 222, "NK", 1, 1, 1, 1, 0, 0, "", "", "" },
	{ 187, "SCH", 1, 1, 1, 1, 0, 0, "", "", "" },
	{ 45, "AAI", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 36, "OOI", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 33, "OEI", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 46, "EEUW", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 35, "IEUW", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 34, "UW", 1, 1, 0, 1, 0, 0, "", "", "" },
	{ 65, "A", 1, 0, 1, 1, 1, 1, "A", "AA", "" },
	{ 66, "B", 0, 0, 0, 0, 0, 0, "B", "", "" },
	{ 67, "C", 1, 1, 1, 1, 0, 0, "C", "", "K" },
	{ 68, "D", 1, 1, 1, 1, 0, 0, "D", "", "D" },
	{ 69, "E", 1, 1, 1, 1, 1, 1, "E", "EE", "U" },
	{ 70, "F", 0, 0, 0, 0, 0, 0, "F", "", "" },
	{ 71, "G", 0, 0, 0, 0, 0, 0, "G", "", "" },
	{ 72, "H", 0, 0, 0, 0, 0, 0, "H", "", "" },
	{ 73, "I", 1, 1, 1, 1, 1, 1, "II", "IE", "I" },
	{ 74, "J", 0, 0, 0, 0, 0, 0, "J", "", "" },
	{ 75, "K", 0, 0, 0, 0, 0, 0, "K", "", "" },
	{ 76, "L", 0, 0, 0, 0, 0, 0, "L", "", "" },
	{ 77, "M", 0, 0, 0, 0, 0, 0, "M", "", "" },
	{ 78, "N", 0, 0, 0, 0, 0, 0, "N", "", "" },
	{ 79, "O", 1, 1, 1, 0, 1, 1, "O", "OO", "" },
	{ 80, "P", 0, 0, 0, 0, 0, 0, "P", "", "" },
	{ 81, "Q", 0, 0, 0, 0, 0, 0, "Q", "", "" },
	{ 82, "R", 0, 0, 0, 0, 0, 0, "R", "", "" },
	{ 83, "S", 0, 0, 0, 0, 0, 0, "S", "", "" },
	{ 84, "T", 0, 0, 0, 0, 0, 0, "T", "", "" },
	{ 85, "U", 1, 1, 1, 0, 1, 1, "U", "UU", "" },
	{ 86, "V", 0, 0, 0, 0, 0, 0, "V", "", "" },
	{ 87, "W", 0, 0, 0, 0, 0, 0, "W", "", "" },
	{ 88, "X", 0, 0, 0, 0, 0, 0, "X", "", "" },
	{ 89, "Y", 1, 1, 1, 1, 0, 0, "Y", "", "I" },
	{ 90, "Z", 0, 0, 0, 0, 0, 0, "Z", "", "" },
};

Key* FindKeyByCode(Key* pKeys, int nKeyCount, int keyCode)
{
	for (int i = 0; i < nKeyCount; i++)
	{
		if (pKeys[i].keyCode == keyCode) {
			return pKeys + i;
		}
	}

	return nullptr;
}

String GetSoundForKey(int keyCode, bool ctrl, bool shift, bool alt, bool useCover)
{
	Key* pKey = nullptr;
	if (useCover)
	{
		pKey = FindKeyByCode(g_keysCover, ARRAY_LENGTH(g_keysCover), keyCode);
	}
	else
	{
		pKey = FindKeyByCode(g_keysClassic, ARRAY_LENGTH(g_keysClassic), keyCode);
	}

	if (pKey)
	{
		if (shift)
		{
			return pKey->soundShift;
		}
		else if (ctrl)
		{
			return pKey->soundCtrl;
		}
		else if (alt)
		{
			return pKey->soundAlt;
		}
		else
		{
			return pKey->soundNormal;
		}
	}

	return "";
}

String GetValueForKey(int keyCode, bool ctrl, bool shift, bool alt, bool useCover)
{
	if (keyCode >= 48 && keyCode <= 57)
	{
		return GetSoundForKey(keyCode, ctrl, shift, alt, useCover);
	}
	else
	{
		return GetSoundForKey(keyCode, false, shift, alt, useCover);
	}
}