// ---------------------------------------------------------------------------

#include <vcl.h>
#include <mmsystem.h>
#pragma hdrstop

#include "frmMainUnit.h"
// ---------------------------------------------------------------------------
#include "lokiCpp/common/Language.h"
// ---------------------------------------------------------------------------
#include <Dbt.h>
#include <vector>

#pragma package(smart_init)
#pragma resource "*.dfm"
TfrmMain *frmMain;

typedef lokiCpp::TLanguage LANG;

// ---------------------------------------------------------------------------
__fastcall TfrmMain::TfrmMain(TComponent *Owner)
	: TForm(Owner),
	d_settings(lokiCpp::TSettings::Instance()),
	d_selfElevate(new TctlSelfElevation()),
	d_terminate(false),
	d_layoutSelection(NULL),
	d_readingPane(new TfrmReadingPane(NULL))
{

	d_dataDir = IncludeTrailingBackslash(ExtractFilePath(Application->ExeName)) + "data\\";

	// unregister
	// regsvr32 /u “path & filename of dll or ocx“
}

// MediaPlayer1->FileName = PATH + "0.wav";

// hwnd = FindWindow(0, L"Form4");
// nid.cbSize = sizeof(NOTIFYICONDATA);
// nid.hWnd = hwnd;
// nid.uID = 100;
// nid.uVersion = NOTIFYICON_VERSION;
// //nid.uCallbackMessage = WM_TRAYICONCLICK;
//
// // TResourceHandle hnd = new TResourceHandle("Icon_1", RT_ICON); // RT_RCDATA is the Resource Type.
// nid.hIcon = (HICON)LoadImage(GetModuleHandle(NULL), L"favicon.ico", IMAGE_ICON, SM_CXICON, SM_CYICON, LR_SHARED | LR_LOADFROMFILE);
// // nid.hIcon = (HICON)LoadIcon(GetModuleHandle(NULL), MAKEINTRESOURCE(ICO1));
// nid.hIcon = (HICON)LoadImage(GetModuleHandle(NULL), L"ico.ico", IMAGE_ICON, SM_CXICON, SM_CYICON, LR_SHARED | LR_LOADFROMFILE);
//
// //wcscpy_s(nid.szTip, 256, L"Tray Icon");
// nid.uFlags = NIF_MESSAGE | NIF_ICON | NIF_TIP;
// Shell_NotifyIconW(NIM_ADD, &nid);
// Shell_NotifyIconW(NIM_ADD, &nid);
// }

// ---------------------------------------------------------------------------
LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)
{
	static std::vector<wchar_t>chars;
	if (nCode == HC_ACTION)
	{
		TKBDLLHOOKSTRUCT *obj = reinterpret_cast<TKBDLLHOOKSTRUCT*>(lParam);

		switch (wParam)
		{
		case WM_KEYDOWN:

			break;
		case WM_KEYUP:
			SendMessage(frmMain->Handle, WM_SHOW_KEY, wParam, lParam);

			// if (frmMain->d_readingPane != NULL)
			// {
			// wchar_t c = obj->vkCode;
			// if (c == ' ')
			// {
			// String s = "";
			// std::vector<wchar_t>::iterator it = chars.begin();
			// while (it != chars.end())
			// {
			// s += *it;
			// ++it;
			// }
			// // frmMain->d_readingPane->SetCaption(s);
			// SendMessage(frmMain->Handle, WM_SHOW_KEY, wParam, lParam);
			// // frmMain->ProcessText(s);
			// //chars.clear();
			// }
			// else
			// {
			// SendMessage(frmMain->Handle, WM_SHOW_KEY, wParam, lParam);
			// chars.push_back(c);
			// // frmMain->ProcessChar(c);
			// // frmMain->d_readingPane->SetCaption(c);
			// }
			// }
			// TfrmMain->MediaPlayer1->Play();

			// sndPlaySound(String(PATH + (wchar_t)(obj->vkCode) + ".wav").w_str(),
			// SND_LOOP || SND_ASYNC || SND_NODEFAULT);

			break;
		case WM_SYSKEYDOWN:

			break;
		case WM_SYSKEYUP:
			// frmMain->Memo1->Lines->Add("syskey : " + IntToStr((__int64)obj->vkCode));
			break;
		}
		// frmMain->Memo1->Tag = frmMain->Memo1->Lines->Count - 1;
		//
	}
	//
	return CallNextHookEx(keyboardHook, nCode, wParam, lParam);
}

__fastcall TfrmMain::~TfrmMain()
{
	if (d_layoutSelection != NULL)
	{
		delete d_layoutSelection;
	}
	if (d_readingPane != NULL)
	{
		delete d_readingPane;
		d_readingPane = NULL;
	}
	delete d_selfElevate;
}

void TfrmMain::Init()
{
	Caption = LANG::Translate(ClassName(), this->Name);

	mnuSound->Caption    = LANG::Translate(ClassName(), mnuSound->Name);
	mnuSounds->Caption   = LANG::Translate(ClassName(), mnuSounds->Name);
	mnuTTS->Caption      = LANG::Translate(ClassName(), mnuTTS->Name);
	mnuSettings->Caption = LANG::Translate(ClassName(), mnuSettings->Name);
	mnuManual->Caption   = LANG::Translate(ClassName(), mnuManual->Name);
	mnuClose->Caption    = LANG::Translate(ClassName(), mnuClose->Name);

	cmdSave->Caption   = LANG::Translate(ClassName(), cmdSave->Name);
	cmdApply->Caption  = LANG::Translate(ClassName(), cmdApply->Name);
	cmdCancel->Caption = LANG::Translate(ClassName(), cmdCancel->Name);

	lblVolume->Caption = LANG::Translate(ClassName(), lblVolume->Name);
	lblSpeed->Caption  = LANG::Translate(ClassName(), lblSpeed->Name);

	rbClassic->Caption = LANG::Translate(ClassName(), rbClassic->Name);
	rbCover->Caption   = LANG::Translate(ClassName(), rbCover->Name);

	gbSoundSettings->Caption = LANG::Translate("Configuration", gbSoundSettings->Name);
	gbTextToSpeech->Caption  = LANG::Translate("Configuration", gbTextToSpeech->Name);
	gbOtherSettings->Caption = LANG::Translate("Configuration", gbOtherSettings->Name);

	HandleConnectDisconnect();
	keyboardHook = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, HInstance, 0);

	try
	{
		SsftRSSoloA1 = new Ssftrssololib_tlb::TSsftRSSoloA(this);
		// when will this fail ? we only need to register if it is not registered...
		BSTR s = SysAllocString(L"");
		SsftRSSoloA1->InitSpeech(s);
		SysFreeString(s);
		SsftRSSoloA1->LangName = "Dutch";
		SsftRSSoloA1->Volume   = 40;

	}
	catch (EOleSysError &ex)
	{
		if (d_selfElevate->UserIsInAdminGroup)
		{
			if (d_selfElevate->RunAsAdmin || d_selfElevate->ProcessIsElevated)
			{
				ShellExecute(0, L"open", L"regsvr32.exe",
					L"speech\\components\\common\\ssftrssolo.ocx", 0, SW_NORMAL);
				try
				{
					SsftRSSoloA1 = new Ssftrssololib_tlb::TSsftRSSoloA(this);
					SsftRSSoloA1->InitSpeech(L"");
					SsftRSSoloA1->LangName = "Dutch";
					SsftRSSoloA1->Volume   = 40;
				}
				catch (...)
				{
				}
			}
			else
			{
				d_selfElevate->SelfElevateClick(Handle);
				d_terminate = true;
				Close();
			}
		}
	}
	catch (Exception &ex)
	{
		ShowMessage(ex.Message);
	}

	LoadSettings();
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::PopupMenuItemClick(TObject *Sender)
{

	TMenuItem *ClickedItem = dynamic_cast<TMenuItem*>(Sender);

	if (ClickedItem)
	{
		switch (ClickedItem->Tag)
		{
		case 0:
			ShowMessage("0");
			break;
		case 1:
			ShowMessage("1");
			break;
		case 2:
			ShowMessage("2");
		}
	}
}

void __fastcall TfrmMain::WndProc(TMessage &Message)
{
	int msgCount = 0;
	if (Message.Msg == WM_SHOW_KEY)
	{
		static std::vector<wchar_t>chars;
		TKBDLLHOOKSTRUCT *obj = reinterpret_cast<TKBDLLHOOKSTRUCT*>(Message.LParam);

		switch (Message.WParam)
		{
		case WM_KEYDOWN:

			break;
		case WM_KEYUP:
			// frmMain->Memo1->Lines->Add(IntToStr((__int64)obj->vkCode));

			if (d_readingPane != NULL)
			{
				wchar_t c = obj->vkCode;
				if (c == ' ' || c == '\r' || c == '\n')
				{
					String s = "";
					std::vector<wchar_t>::iterator it = chars.begin();
					while (it != chars.end())
					{
						s += *it;
						++it;
					}
					ProcessText(s);
					chars.clear();
				}
				else if (c == '\b')
				{
					chars.pop_back();
				}
				else
				{
					chars.push_back(c);
					ProcessChar(c);
				}
			}

			// sndPlaySound(String(PATH + (wchar_t)(obj->vkCode) + ".wav").w_str(),
			// SND_LOOP || SND_ASYNC || SND_NODEFAULT);

			break;
		case WM_SYSKEYDOWN:

			break;
		case WM_SYSKEYUP:
			// frmMain->Memo1->Lines->Add("syskey : " + IntToStr((__int64)obj->vkCode));
			break;
		}

	}
	else if (Message.Msg == WM_DEVICECHANGE)
	{
		switch (Message.WParam)
		{
		case DBT_DEVICEARRIVAL:
			msgCount++;
			// StringCchPrintf(strBuff, 256,
			// TEXT("Message %d: DBT_DEVICEARRIVAL\n"), msgCount);
			break;
		case DBT_DEVICEREMOVECOMPLETE:
			msgCount++;
			// StringCchPrintf(strBuff, 256,
			// TEXT("Message %d: DBT_DEVICEREMOVECOMPLETE\n"), msgCount);
			break;
		case DBT_DEVNODES_CHANGED:
			msgCount++;
			// StringCchPrintf(strBuff, 256,
			// TEXT("Message %d: DBT_DEVNODES_CHANGED\n"), msgCount);
			break;
		default:
			msgCount++;
			// StringCchPrintf(strBuff, 256,
			// TEXT("Message %d: WM_DEVICECHANGE message received, value %d unhandled.\n")
			// , msgCount, wParam);
			break;
		}
		HandleConnectDisconnect();
	}

	TForm::WndProc(Message);
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::HandleConnectDisconnect()
{
	// Hoe langer de zin of het woord des te meer er wordt uitgesproken....
	// String EindeTekst = L"Einde demo. Bezoek www punt clevvie . nl voor informatie over de volledige versieEinde demo. Bezoek www punt clevvie . nl voor informatie over de volledige versie";
	// SsftRSSoloA1->Speak(EindeTekst.c_str(), enumTextFormat::NormalText);

	HMACHINE hcomp;
	DEVINST hroot;
	DEVINST hfirst;

	CM_Locate_DevNode(&hroot, NULL, 0);
	CM_Get_Child(&hfirst, hroot, 0);
	if (ParseSubNodes(&hroot, hfirst))
	{
		d_config.KeboardConnected = true;

		ProcessText(LANG::Translate("Actions", "KeyboardConnected"));
	}
	else
	{
		d_config.KeboardConnected = false;
		#ifdef _DEBUG
		d_config.KeboardConnected = true;
		#endif

		ProcessText(LANG::Translate("Actions", "KeyboardDisconnected"), true);
	}
}

bool TfrmMain::ParseSubNodes(PDEVINST parent, DEVINST hnode)
{
	bool Result = false;

	DEVINST hsibling, hchild;

	char buf[1024];
	ULONG size;

	String hardwareid = "";

	size = 1024;

	while (!Result && hnode != NULL)
	{
		if (CM_Get_Sibling(&hsibling, hnode, 0) != CR_SUCCESS)
		{
			hsibling = NULL;
		}

		if (CM_Get_DevNode_Registry_Property(hnode, CM_DRP_HARDWAREID, NULL,
				buf, &size, 0) == CR_SUCCESS)
		{
			// XP doet mixed case, Vista uppercase...
			hardwareid = StrUpper(PChar(buf));
			if ((Pos("USB\\VID_04B4&PID_0101", hardwareid) != 0) ||
				(Pos("USB\\VID_0CD3&PID_320F", hardwareid) != 0))
			{
				Result = true;
			}

			if (!Result && CM_Get_Child(&hchild, hnode, 0) == CR_SUCCESS)
			{
				Result = ParseSubNodes(&hnode, hchild);
			}
		}
		hnode = hsibling;
	}
	return Result;
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::InstellingenClick(TObject *Sender)
{
	// Setting click
	this->Show();
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::HandleidingClick(TObject *Sender)
{
	// Handleiding click
	ShellExecute(0, L"open", L"http://www.clevy.nl/dyscover2-handleiding", 0, 0, SW_SHOWNORMAL);
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::AfsluitenClick(TObject *Sender)
{
	// Afsluiten click
	TrayIcon->Visible = false;
	d_terminate       = true;
	Close();
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::FormCloseQuery(TObject *Sender, bool &CanClose)
{
	CanClose = d_terminate || false;
	Hide();
}

void TfrmMain::ProcessChar(String value)
{
	if (value.Trim().Length() == 0)
	{
		return;
	}

	if (SsftRSSoloA1 == NULL || !d_config.Sound || !d_config.KeboardConnected)
	{
		return;
	}

	String filename = value + ".wav";
	if (FileExists(d_dataDir + filename))
	{
		sndPlaySound((d_dataDir + filename).c_str(), SND_ASYNC || SND_NODEFAULT);
	}
	else
	{
		ClearSpeech();
		BSTR s = SysAllocString(value.w_str());
		SsftRSSoloA1->Speak(s, enumTextFormat::NormalText);
		SysFreeString(s);
	}
}

void TfrmMain::ProcessText(String value, bool ignoreKeboardStatus)
{
	if (value.Trim().Length() == 0)
	{
		return;
	}

	if (SsftRSSoloA1 == NULL || !d_config.Sound || !d_config.TTS || !(d_config.KeboardConnected || ignoreKeboardStatus))
	{
		return;
	}

	d_readingPane->SetCaption(value);
	ClearSpeech();
	BSTR s = SysAllocString(value.w_str());
	SsftRSSoloA1->Speak(s, enumTextFormat::NormalText);
	SysFreeString(s);
}

void TfrmMain::ClearSpeech()
{
	if (SsftRSSoloA1->InstanceStatus != enumStatus::Idle)
	{
		SsftRSSoloA1->Stop();
	}
	while (SsftRSSoloA1->InstanceStatus != enumStatus::Idle)
	{
		Sleep(25);
	}
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::cmdSaveClick(TObject *Sender)
{
	SaveSettings();
	ModalResult = mrOk;
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::ApplicationEvents1Idle(TObject *Sender, bool &Done)
{
	ApplicationEvents1->OnIdle = NULL;
	Init();
}

// ---------------------------------------------------------------------------
void __fastcall TfrmMain::cmdApplyClick(TObject *Sender)
{
	SaveSettings();
}
// ---------------------------------------------------------------------------

void TfrmMain::LoadSettings()
{
	bool   bValue = false;
	double dValue = 0.0;

	d_settings->GetConfig("clevy", "Sound", bValue);
	chkSound->Checked = bValue;
	d_settings->GetConfig("clevy", "Sounds", bValue);
	chkSound->Checked = bValue;
	d_settings->GetConfig("clevy", "TTS", bValue);
	chkTTS->Checked = bValue;
	d_settings->GetConfig("clevy", "ActivateAfterWords", bValue);
	chkWord->Checked = bValue;
	d_settings->GetConfig("clevy", "SelectionAndSpeaker", bValue);
	chkSelectionSpeakerKey->Checked = bValue;
	d_settings->GetConfig("clevy", "StartWithWindows", bValue);
	chkAutomaticBoot->Checked = bValue;
	d_settings->GetConfig("clevy", "ReadAlong", bValue);
	chkReadAlong->Checked = bValue;
	d_settings->GetConfig("clevy", "Volume", dValue);
	tbVolume->Position = dValue;
	d_settings->GetConfig("clevy", "ReadingSpeed", dValue);
	tbSpeed->Position = dValue;

	d_settings->GetConfig("clevy", "CoverType", dValue);
	switch ((int)dValue)
	{
	case 1:
		rbCover->Checked = true;
	case 0:
	default:
		rbClassic->Checked = true;
	}

	UpdateConfiguration();
}

void TfrmMain::SaveSettings()
{
	d_settings->SetConfig(L"clevy", "Sound", chkSound->Checked);

	d_settings->SetConfig(L"clevy", L"Sounds", chkSound->Checked);
	d_settings->SetConfig(L"clevy", L"TTS", chkTTS->Checked);
	d_settings->SetConfig(L"clevy", L"ActivateAfterWords", chkWord->Checked);
	d_settings->SetConfig(L"clevy", L"SelectionAndSpeaker", chkSelectionSpeakerKey->Checked);
	d_settings->SetConfig(L"clevy", L"StartWithWindows", chkAutomaticBoot->Checked);
	d_settings->SetConfig(L"clevy", L"ReadAlong", chkReadAlong->Checked);

	d_settings->SetConfig(L"clevy", L"Volume", (double)tbVolume->Position);
	d_settings->SetConfig(L"clevy", L"ReadingSpeed", (double)tbSpeed->Position);

	d_settings->SetConfig(L"clevy", L"CoverType", rbCover->Checked ? 1. : 0.);

	UpdateConfiguration();

	d_settings->SaveConfig();
}

void TfrmMain::UpdateConfiguration()
{
	d_config.Sound = chkSound->Checked;

	d_config.Sounds              = chkSound->Checked;
	d_config.TTS                 = chkTTS->Checked;
	d_config.ActivateAfterWords  = chkWord->Checked;
	d_config.SelectionAndSpeaker = chkSelectionSpeakerKey->Checked;
	d_config.StartWithWindows    = chkAutomaticBoot->Checked;
	d_config.ReadAlong           = chkReadAlong->Checked;

	d_config.Volume       = (double)tbVolume->Position;
	d_config.ReadingSpeed = (double)tbSpeed->Position;

	d_config.CoverType = rbCover->Checked ? 1. : 0.;

}

void __fastcall TfrmMain::cmdCancelClick(TObject *Sender)
{
	Hide();
}
// ---------------------------------------------------------------------------
