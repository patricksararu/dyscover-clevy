// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 2-6-2016 16:17:31 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\Clevy Dyscover\speech\components\common\ssftrssolo.ocx (1)
// LIBID: {6FEF776A-4CC5-11D4-9521-0000F8092E73}
// LCID: 0
// Helpfile: 
// HelpString: ScanSoft RealSpeak Solo ActiveX Control module
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   SSFTRSSOLOLib_TLBH
#define   SSFTRSSOLOLib_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Ssftrssololib_tlb
{

// *********************************************************************//
// HelpString: ScanSoft RealSpeak Solo ActiveX Control module
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_SSFTRSSOLOLib;
extern __declspec (package) const GUID GUID_enumFrequency;
extern __declspec (package) const GUID GUID_enumReadMode;
extern __declspec (package) const GUID GUID_enumOutType;
extern __declspec (package) const GUID GUID_enumJmpMode;
extern __declspec (package) const GUID GUID_enumTextFormat;
extern __declspec (package) const GUID GUID_enumStatus;
extern __declspec (package) const GUID DIID__DSsftRSSolo;
extern __declspec (package) const GUID DIID__DSsftRSSoloEvents;
extern __declspec (package) const GUID CLSID_SsftRSSoloA;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    enumFrequency;
enum class    enumReadMode;
enum class    enumOutType;
enum class    enumJmpMode;
enum class    enumTextFormat;
enum class    enumStatus;
interface DECLSPEC_UUID("{6FEF776B-4CC5-11D4-9521-0000F8092E73}") _DSsftRSSolo;
typedef TComInterface<_DSsftRSSolo, &DIID__DSsftRSSolo> _DSsftRSSoloPtr;

interface DECLSPEC_UUID("{6FEF776C-4CC5-11D4-9521-0000F8092E73}") _DSsftRSSoloEvents;
typedef TComInterface<_DSsftRSSoloEvents, &DIID__DSsftRSSoloEvents> _DSsftRSSoloEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _DSsftRSSolo SsftRSSoloA;
typedef _DSsftRSSoloPtr SsftRSSoloAPtr;

#define LIBID_OF_SsftRSSoloA (&LIBID_SSFTRSSOLOLib)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class enumFrequency
{
  EightKHz = 8, 
  ElevenKHz = 11, 
  TwentyTwoKHz = 22
};

enum class enumReadMode
{
  ModeSentence = 1, 
  ModeLetter = 2, 
  ModeWord = 3, 
  ModeTerminator = 4
};

enum class enumOutType
{
  OutStandart = 0, 
  OutSwapped = 1
};

enum class enumJmpMode
{
  TextUnit = 1, 
  BookMark = 2
};

enum class enumTextFormat
{
  NormalText = 0, 
  HTMLText = 1, 
  XMLText = 2
};

enum class enumStatus
{
  Idle = 0, 
  Pause = 1, 
  Process = 2
};

// *********************************************************************//
// Interface: _DSsftRSSolo
// Flags:     (4112) Hidden Dispatchable
// GUID:      {6FEF776B-4CC5-11D4-9521-0000F8092E73}
// *********************************************************************//
interface _DSsftRSSolo : public TDispWrapper<IDispatch>
{
  void __fastcall set_CommandSymbol(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* CommandSymbol */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_CommandSymbol()
  {
    _TDispID _dispid(/* CommandSymbol */ DISPID(13));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DeviceId(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* DeviceId */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_DeviceId()
  {
    _TDispID _dispid(/* DeviceId */ DISPID(26));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DictionaryCount(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* DictionaryCount */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_DictionaryCount()
  {
    _TDispID _dispid(/* DictionaryCount */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DisableThrowError(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* DisableThrowError */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_DisableThrowError()
  {
    _TDispID _dispid(/* DisableThrowError */ DISPID(25));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Engine(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Engine */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Engine()
  {
    _TDispID _dispid(/* Engine */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EngineCount(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* EngineCount */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_EngineCount()
  {
    _TDispID _dispid(/* EngineCount */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ErrorCode(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* ErrorCode */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ErrorCode()
  {
    _TDispID _dispid(/* ErrorCode */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ErrorMessage(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ErrorMessage */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ErrorMessage()
  {
    _TDispID _dispid(/* ErrorMessage */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Frequency(Ssftrssololib_tlb::enumFrequency /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Frequency */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Ssftrssololib_tlb::enumFrequency /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Ssftrssololib_tlb::enumFrequency /*[VT_USERDEFINED:0]*/ __fastcall get_Frequency()
  {
    _TDispID _dispid(/* Frequency */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Ssftrssololib_tlb::enumFrequency /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_InstanceStatus(Ssftrssololib_tlb::enumStatus /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* InstanceStatus */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Ssftrssololib_tlb::enumStatus /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Ssftrssololib_tlb::enumStatus /*[VT_USERDEFINED:0]*/ __fastcall get_InstanceStatus()
  {
    _TDispID _dispid(/* InstanceStatus */ DISPID(23));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Ssftrssololib_tlb::enumStatus /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_LanguageCount(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* LanguageCount */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_LanguageCount()
  {
    _TDispID _dispid(/* LanguageCount */ DISPID(17));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LangName(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* LangName */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_LangName()
  {
    _TDispID _dispid(/* LangName */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LangTLW(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* LangTLW */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_LangTLW()
  {
    _TDispID _dispid(/* LangTLW */ DISPID(27));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LngAutoRec(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* LngAutoRec */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_LngAutoRec()
  {
    _TDispID _dispid(/* LngAutoRec */ DISPID(14));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MessageMode(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MessageMode */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MessageMode()
  {
    _TDispID _dispid(/* MessageMode */ DISPID(15));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PauseDuration(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* PauseDuration */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_PauseDuration()
  {
    _TDispID _dispid(/* PauseDuration */ DISPID(12));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PersistentFile(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PersistentFile */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PersistentFile()
  {
    _TDispID _dispid(/* PersistentFile */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Pitch(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* Pitch */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_Pitch()
  {
    _TDispID _dispid(/* Pitch */ DISPID(9));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PP(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PP */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PP()
  {
    _TDispID _dispid(/* PP */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PPCount(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* PPCount */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_PPCount()
  {
    _TDispID _dispid(/* PPCount */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Rate(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* Rate */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_Rate()
  {
    _TDispID _dispid(/* Rate */ DISPID(10));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ReadMode(Ssftrssololib_tlb::enumReadMode /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ReadMode */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Ssftrssololib_tlb::enumReadMode /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Ssftrssololib_tlb::enumReadMode /*[VT_USERDEFINED:0]*/ __fastcall get_ReadMode()
  {
    _TDispID _dispid(/* ReadMode */ DISPID(11));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Ssftrssololib_tlb::enumReadMode /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_RuleTableCount(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* RuleTableCount */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_RuleTableCount()
  {
    _TDispID _dispid(/* RuleTableCount */ DISPID(16));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SystemMode(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* SystemMode */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_SystemMode()
  {
    _TDispID _dispid(/* SystemMode */ DISPID(18));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Voice(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Voice */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Voice()
  {
    _TDispID _dispid(/* Voice */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_VoiceCount(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* VoiceCount */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_VoiceCount()
  {
    _TDispID _dispid(/* VoiceCount */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Volume(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* Volume */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_Volume()
  {
    _TDispID _dispid(/* Volume */ DISPID(8));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall AboutBox()
  {
    _TDispID _dispid(/* AboutBox */ DISPID(-552));
    OleProcedure(_dispid);
  }

  long __fastcall AddLicenseKey(BSTR pszLincenseKey)
  {
    _TDispID _dispid(/* AddLicenseKey */ DISPID(60));
    TAutoArgs<1> _args;
    _args[1] = pszLincenseKey /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Backward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue)
  {
    _TDispID _dispid(/* Backward */ DISPID(35));
    TAutoArgs<2> _args;
    _args[1] = (int)sJmpMode /*[VT_USERDEFINED:0]*/;
    _args[2] = lJmpValue /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Forward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue)
  {
    _TDispID _dispid(/* Forward */ DISPID(36));
    TAutoArgs<2> _args;
    _args[1] = (int)sJmpMode /*[VT_USERDEFINED:0]*/;
    _args[2] = lJmpValue /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GeneratePcmBuff(BSTR pszInText, Ssftrssololib_tlb::enumTextFormat sTextFormat, 
                                  short sPCMFormat)
  {
    _TDispID _dispid(/* GeneratePcmBuff */ DISPID(55));
    TAutoArgs<3> _args;
    _args[1] = pszInText /*[VT_BSTR:0]*/;
    _args[2] = (int)sTextFormat /*[VT_USERDEFINED:0]*/;
    _args[3] = sPCMFormat /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GeneratePcmFile(BSTR pszInText, short sTextFormat, BSTR pszOutFile, 
                                  short sPCMFormat, Ssftrssololib_tlb::enumOutType sOutType)
  {
    _TDispID _dispid(/* GeneratePcmFile */ DISPID(31));
    TAutoArgs<5> _args;
    _args[1] = pszInText /*[VT_BSTR:0]*/;
    _args[2] = sTextFormat /*[VT_I2:0]*/;
    _args[3] = pszOutFile /*[VT_BSTR:0]*/;
    _args[4] = sPCMFormat /*[VT_I2:0]*/;
    _args[5] = (int)sOutType /*[VT_USERDEFINED:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetDictionaryPathName(short sDictionaryIndex)
  {
    _TDispID _dispid(/* GetDictionaryPathName */ DISPID(52));
    TAutoArgs<1> _args;
    _args[1] = sDictionaryIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetEngineName(long nEngineIndex)
  {
    _TDispID _dispid(/* GetEngineName */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = nEngineIndex /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetEngineVersion(long nEngineIndex)
  {
    _TDispID _dispid(/* GetEngineVersion */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = nEngineIndex /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetLanguageName(long nLanguageIndex)
  {
    _TDispID _dispid(/* GetLanguageName */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = nLanguageIndex /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetLanguageOfText(BSTR pszInText, Ssftrssololib_tlb::enumTextFormat sTextFormat)
  {
    _TDispID _dispid(/* GetLanguageOfText */ DISPID(45));
    TAutoArgs<2> _args;
    _args[1] = pszInText /*[VT_BSTR:0]*/;
    _args[2] = (int)sTextFormat /*[VT_USERDEFINED:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetNextPcm(VARIANT Buffer, long* plBufferLen, VARIANT_BOOL* pbLastBuffer, 
                             VARIANT bNoTimer/*[opt]*/= TNoParam())
  {
    _TDispID _dispid(/* GetNextPcm */ DISPID(59));
    TAutoArgs<4> _args;
    _args[1] = Buffer /*[VT_VARIANT:0]*/;
    _args[2] = plBufferLen /*[VT_I4:1]*/;
    _args[3] = pbLastBuffer /*[VT_BOOL:1]*/;
    _args[4] = bNoTimer /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetNextPcmAndMarkers(VARIANT Buffer, long* plBufferLen, VARIANT Mrk, 
                                       long* plMarkerSize, VARIANT_BOOL* pbLastBuffer, 
                                       VARIANT bNoTimer/*[opt]*/= TNoParam())
  {
    _TDispID _dispid(/* GetNextPcmAndMarkers */ DISPID(61));
    TAutoArgs<6> _args;
    _args[1] = Buffer /*[VT_VARIANT:0]*/;
    _args[2] = plBufferLen /*[VT_I4:1]*/;
    _args[3] = Mrk /*[VT_VARIANT:0]*/;
    _args[4] = plMarkerSize /*[VT_I4:1]*/;
    _args[5] = pbLastBuffer /*[VT_BOOL:1]*/;
    _args[6] = bNoTimer /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetPersistentProperties()
  {
    _TDispID _dispid(/* GetPersistentProperties */ DISPID(56));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetPPDescription(short sPPIndex)
  {
    _TDispID _dispid(/* GetPPDescription */ DISPID(43));
    TAutoArgs<1> _args;
    _args[1] = sPPIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetPPManufacturer(short sPPIndex)
  {
    _TDispID _dispid(/* GetPPManufacturer */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = sPPIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetPPName(short sPPIndex)
  {
    _TDispID _dispid(/* GetPPName */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = sPPIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetPPVersion(short sPPIndex)
  {
    _TDispID _dispid(/* GetPPVersion */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = sPPIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetRuleTablePathName(short sRuleTableIndex)
  {
    _TDispID _dispid(/* GetRuleTablePathName */ DISPID(50));
    TAutoArgs<1> _args;
    _args[1] = sRuleTableIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetVoiceAge(short sVoiceIndex)
  {
    _TDispID _dispid(/* GetVoiceAge */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = sVoiceIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetVoiceName(short sVoiceIndex)
  {
    _TDispID _dispid(/* GetVoiceName */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = sVoiceIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetVoiceVersion(short sVoiceIndex)
  {
    _TDispID _dispid(/* GetVoiceVersion */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = sVoiceIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetVoiceType(short sVoiceIndex)
  {
    _TDispID _dispid(/* GetVoiceType */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = sVoiceIndex /*[VT_I2:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall InitSpeech(BSTR szPath)
  {
    _TDispID _dispid(/* InitSpeech */ DISPID(58));
    TAutoArgs<1> _args;
    _args[1] = szPath /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall LoadDictionary(BSTR szDictionaryPathName)
  {
    _TDispID _dispid(/* LoadDictionary */ DISPID(51));
    TAutoArgs<1> _args;
    _args[1] = szDictionaryPathName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall LoadRuleTable(BSTR pszFileName)
  {
    _TDispID _dispid(/* LoadRuleTable */ DISPID(46));
    TAutoArgs<1> _args;
    _args[1] = pszFileName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Pause()
  {
    _TDispID _dispid(/* Pause */ DISPID(33));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall PersistProperties()
  {
    _TDispID _dispid(/* PersistProperties */ DISPID(57));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Resume()
  {
    _TDispID _dispid(/* Resume */ DISPID(34));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Speak(BSTR pszInText, Ssftrssololib_tlb::enumTextFormat sTextFormat)
  {
    _TDispID _dispid(/* Speak */ DISPID(49));
    TAutoArgs<2> _args;
    _args[1] = pszInText /*[VT_BSTR:0]*/;
    _args[2] = (int)sTextFormat /*[VT_USERDEFINED:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Stop()
  {
    _TDispID _dispid(/* Stop */ DISPID(32));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall UnloadAllDictionaries()
  {
    _TDispID _dispid(/* UnloadAllDictionaries */ DISPID(53));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall UnloadAllRuleTables()
  {
    _TDispID _dispid(/* UnloadAllRuleTables */ DISPID(47));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall UnloadDictionary(BSTR szDictionaryPathName)
  {
    _TDispID _dispid(/* UnloadDictionary */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = szDictionaryPathName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall UnloadRuleTable(BSTR pszFileName)
  {
    _TDispID _dispid(/* UnloadRuleTable */ DISPID(48));
    TAutoArgs<1> _args;
    _args[1] = pszFileName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   short           CommandSymbol = {read = get_CommandSymbol, write = set_CommandSymbol};
  __property   long            DeviceId = {read = get_DeviceId, write = set_DeviceId};
  __property   short           DictionaryCount = {read = get_DictionaryCount, write = set_DictionaryCount};
  __property   VARIANT_BOOL    DisableThrowError = {read = get_DisableThrowError, write = set_DisableThrowError};
  __property   BSTR            Engine = {read = get_Engine, write = set_Engine};
  __property   long            EngineCount = {read = get_EngineCount, write = set_EngineCount};
  __property   long            ErrorCode = {read = get_ErrorCode, write = set_ErrorCode};
  __property   BSTR            ErrorMessage = {read = get_ErrorMessage, write = set_ErrorMessage};
  __property   Ssftrssololib_tlb::enumFrequency Frequency = {read = get_Frequency, write = set_Frequency};
  __property   Ssftrssololib_tlb::enumStatus InstanceStatus = {read = get_InstanceStatus, write = set_InstanceStatus};
  __property   short           LanguageCount = {read = get_LanguageCount, write = set_LanguageCount};
  __property   BSTR            LangName = {read = get_LangName, write = set_LangName};
  __property   BSTR            LangTLW = {read = get_LangTLW, write = set_LangTLW};
  __property   VARIANT_BOOL    LngAutoRec = {read = get_LngAutoRec, write = set_LngAutoRec};
  __property   long            MessageMode = {read = get_MessageMode, write = set_MessageMode};
  __property   short           PauseDuration = {read = get_PauseDuration, write = set_PauseDuration};
  __property   BSTR            PersistentFile = {read = get_PersistentFile, write = set_PersistentFile};
  __property   short           Pitch = {read = get_Pitch, write = set_Pitch};
  __property   BSTR            PP = {read = get_PP, write = set_PP};
  __property   short           PPCount = {read = get_PPCount, write = set_PPCount};
  __property   short           Rate = {read = get_Rate, write = set_Rate};
  __property   Ssftrssololib_tlb::enumReadMode ReadMode = {read = get_ReadMode, write = set_ReadMode};
  __property   short           RuleTableCount = {read = get_RuleTableCount, write = set_RuleTableCount};
  __property   short           SystemMode = {read = get_SystemMode, write = set_SystemMode};
  __property   BSTR            Voice = {read = get_Voice, write = set_Voice};
  __property   short           VoiceCount = {read = get_VoiceCount, write = set_VoiceCount};
  __property   short           Volume = {read = get_Volume, write = set_Volume};
};
// *********************************************************************//
// Interface: _DSsftRSSoloEvents
// Flags:     (4096) Dispatchable
// GUID:      {6FEF776C-4CC5-11D4-9521-0000F8092E73}
// *********************************************************************//
interface _DSsftRSSoloEvents : public TDispWrapper<IDispatch>
{
  void __fastcall WordMark(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
  {
    _TDispID _dispid(/* WordMark */ DISPID(1));
    TAutoArgs<4> _args;
    _args[1] = lSrcPos /*[VT_I4:0]*/;
    _args[2] = lSrcLen /*[VT_I4:0]*/;
    _args[3] = lDestPos /*[VT_I4:0]*/;
    _args[4] = lDestLen /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall BeginProcess()
  {
    _TDispID _dispid(/* BeginProcess */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall EndProcess()
  {
    _TDispID _dispid(/* EndProcess */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall TextUnit(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
  {
    _TDispID _dispid(/* TextUnit */ DISPID(4));
    TAutoArgs<4> _args;
    _args[1] = lSrcPos /*[VT_I4:0]*/;
    _args[2] = lSrcLen /*[VT_I4:0]*/;
    _args[3] = lDestPos /*[VT_I4:0]*/;
    _args[4] = lDestLen /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Pause()
  {
    _TDispID _dispid(/* Pause */ DISPID(5));
    OleProcedure(_dispid);
  }

  void __fastcall Stop()
  {
    _TDispID _dispid(/* Stop */ DISPID(6));
    OleProcedure(_dispid);
  }

  void __fastcall Resume()
  {
    _TDispID _dispid(/* Resume */ DISPID(7));
    OleProcedure(_dispid);
  }

  void __fastcall BookMark(long sID, long lSrcPos, long lDestPos)
  {
    _TDispID _dispid(/* BookMark */ DISPID(8));
    TAutoArgs<3> _args;
    _args[1] = sID /*[VT_I4:0]*/;
    _args[2] = lSrcPos /*[VT_I4:0]*/;
    _args[3] = lDestPos /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Forward()
  {
    _TDispID _dispid(/* Forward */ DISPID(9));
    OleProcedure(_dispid);
  }

  void __fastcall Backward()
  {
    _TDispID _dispid(/* Backward */ DISPID(10));
    OleProcedure(_dispid);
  }

  void __fastcall PhonemeMark(short sPhoneme, long lSrcPos, long lSrcLen, long lDestPos, 
                              long lDestLen)
  {
    _TDispID _dispid(/* PhonemeMark */ DISPID(11));
    TAutoArgs<5> _args;
    _args[1] = sPhoneme /*[VT_I2:0]*/;
    _args[2] = lSrcPos /*[VT_I4:0]*/;
    _args[3] = lSrcLen /*[VT_I4:0]*/;
    _args[4] = lDestPos /*[VT_I4:0]*/;
    _args[5] = lDestLen /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Error(long lError)
  {
    _TDispID _dispid(/* Error */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = lError /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall LngChange(BSTR szLangName)
  {
    _TDispID _dispid(/* LngChange */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = szLangName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _DSsftRSSolo
// Flags:     (4112) Hidden Dispatchable
// GUID:      {6FEF776B-4CC5-11D4-9521-0000F8092E73}
// *********************************************************************//
template<class T>
class _DSsftRSSoloDispT : public TAutoDriver<_DSsftRSSolo>
{
public:
  _DSsftRSSoloDispT(){}

  _DSsftRSSoloDispT(_DSsftRSSolo *pintf)
  {
    TAutoDriver<_DSsftRSSolo>::Bind(pintf, false);
  }

  _DSsftRSSoloDispT(_DSsftRSSoloPtr pintf)
  {
    TAutoDriver<_DSsftRSSolo>::Bind(pintf, true);
  }

  _DSsftRSSoloDispT& operator=(_DSsftRSSolo *pintf)
  {
    TAutoDriver<_DSsftRSSolo>::Bind(pintf, false);
    return *this;
  }

  _DSsftRSSoloDispT& operator=(_DSsftRSSoloPtr pintf)
  {
    TAutoDriver<_DSsftRSSolo>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SsftRSSoloA));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SsftRSSoloA);
  }

  void            __fastcall set_CommandSymbol(short Value);
  short           __fastcall get_CommandSymbol();
  void            __fastcall set_DeviceId(long Value);
  long            __fastcall get_DeviceId();
  void            __fastcall set_DictionaryCount(short Value);
  short           __fastcall get_DictionaryCount();
  void            __fastcall set_DisableThrowError(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_DisableThrowError();
  void            __fastcall set_Engine(BSTR Value);
  BSTR            __fastcall get_Engine();
  void            __fastcall set_EngineCount(long Value);
  long            __fastcall get_EngineCount();
  void            __fastcall set_ErrorCode(long Value);
  long            __fastcall get_ErrorCode();
  void            __fastcall set_ErrorMessage(BSTR Value);
  BSTR            __fastcall get_ErrorMessage();
  void            __fastcall set_Frequency(Ssftrssololib_tlb::enumFrequency Value);
  Ssftrssololib_tlb::enumFrequency __fastcall get_Frequency();
  void            __fastcall set_InstanceStatus(Ssftrssololib_tlb::enumStatus Value);
  Ssftrssololib_tlb::enumStatus __fastcall get_InstanceStatus();
  void            __fastcall set_LanguageCount(short Value);
  short           __fastcall get_LanguageCount();
  void            __fastcall set_LangName(BSTR Value);
  BSTR            __fastcall get_LangName();
  void            __fastcall set_LangTLW(BSTR Value);
  BSTR            __fastcall get_LangTLW();
  void            __fastcall set_LngAutoRec(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_LngAutoRec();
  void            __fastcall set_MessageMode(long Value);
  long            __fastcall get_MessageMode();
  void            __fastcall set_PauseDuration(short Value);
  short           __fastcall get_PauseDuration();
  void            __fastcall set_PersistentFile(BSTR Value);
  BSTR            __fastcall get_PersistentFile();
  void            __fastcall set_Pitch(short Value);
  short           __fastcall get_Pitch();
  void            __fastcall set_PP(BSTR Value);
  BSTR            __fastcall get_PP();
  void            __fastcall set_PPCount(short Value);
  short           __fastcall get_PPCount();
  void            __fastcall set_Rate(short Value);
  short           __fastcall get_Rate();
  void            __fastcall set_ReadMode(Ssftrssololib_tlb::enumReadMode Value);
  Ssftrssololib_tlb::enumReadMode __fastcall get_ReadMode();
  void            __fastcall set_RuleTableCount(short Value);
  short           __fastcall get_RuleTableCount();
  void            __fastcall set_SystemMode(short Value);
  short           __fastcall get_SystemMode();
  void            __fastcall set_Voice(BSTR Value);
  BSTR            __fastcall get_Voice();
  void            __fastcall set_VoiceCount(short Value);
  short           __fastcall get_VoiceCount();
  void            __fastcall set_Volume(short Value);
  short           __fastcall get_Volume();
  void            __fastcall AboutBox();
  long            __fastcall AddLicenseKey(BSTR pszLincenseKey);
  long            __fastcall Backward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue);
  long            __fastcall Forward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue);
  long            __fastcall GeneratePcmBuff(BSTR pszInText, 
                                             Ssftrssololib_tlb::enumTextFormat sTextFormat, 
                                             short sPCMFormat);
  long            __fastcall GeneratePcmFile(BSTR pszInText, short sTextFormat, BSTR pszOutFile, 
                                             short sPCMFormat, 
                                             Ssftrssololib_tlb::enumOutType sOutType);
  BSTR            __fastcall GetDictionaryPathName(short sDictionaryIndex);
  BSTR            __fastcall GetEngineName(long nEngineIndex);
  BSTR            __fastcall GetEngineVersion(long nEngineIndex);
  BSTR            __fastcall GetLanguageName(long nLanguageIndex);
  BSTR            __fastcall GetLanguageOfText(BSTR pszInText, 
                                               Ssftrssololib_tlb::enumTextFormat sTextFormat);
  long            __fastcall GetNextPcm(VARIANT Buffer, long* plBufferLen, 
                                        VARIANT_BOOL* pbLastBuffer, 
                                        VARIANT bNoTimer/*[opt]*/= TNoParam());
  long            __fastcall GetNextPcmAndMarkers(VARIANT Buffer, long* plBufferLen, VARIANT Mrk, 
                                                  long* plMarkerSize, VARIANT_BOOL* pbLastBuffer, 
                                                  VARIANT bNoTimer/*[opt]*/= TNoParam());
  long            __fastcall GetPersistentProperties();
  BSTR            __fastcall GetPPDescription(short sPPIndex);
  BSTR            __fastcall GetPPManufacturer(short sPPIndex);
  BSTR            __fastcall GetPPName(short sPPIndex);
  BSTR            __fastcall GetPPVersion(short sPPIndex);
  BSTR            __fastcall GetRuleTablePathName(short sRuleTableIndex);
  BSTR            __fastcall GetVoiceAge(short sVoiceIndex);
  BSTR            __fastcall GetVoiceName(short sVoiceIndex);
  BSTR            __fastcall GetVoiceVersion(short sVoiceIndex);
  BSTR            __fastcall GetVoiceType(short sVoiceIndex);
  long            __fastcall InitSpeech(BSTR szPath);
  long            __fastcall LoadDictionary(BSTR szDictionaryPathName);
  long            __fastcall LoadRuleTable(BSTR pszFileName);
  long            __fastcall Pause();
  long            __fastcall PersistProperties();
  long            __fastcall Resume();
  long            __fastcall Speak(BSTR pszInText, Ssftrssololib_tlb::enumTextFormat sTextFormat);
  long            __fastcall Stop();
  long            __fastcall UnloadAllDictionaries();
  long            __fastcall UnloadAllRuleTables();
  long            __fastcall UnloadDictionary(BSTR szDictionaryPathName);
  long            __fastcall UnloadRuleTable(BSTR pszFileName);

  __property   short           CommandSymbol = {read = get_CommandSymbol, write = set_CommandSymbol};
  __property   long            DeviceId = {read = get_DeviceId, write = set_DeviceId};
  __property   short           DictionaryCount = {read = get_DictionaryCount, write = set_DictionaryCount};
  __property   VARIANT_BOOL    DisableThrowError = {read = get_DisableThrowError, write = set_DisableThrowError};
  __property   BSTR            Engine = {read = get_Engine, write = set_Engine};
  __property   long            EngineCount = {read = get_EngineCount, write = set_EngineCount};
  __property   long            ErrorCode = {read = get_ErrorCode, write = set_ErrorCode};
  __property   BSTR            ErrorMessage = {read = get_ErrorMessage, write = set_ErrorMessage};
  __property   Ssftrssololib_tlb::enumFrequency Frequency = {read = get_Frequency, write = set_Frequency};
  __property   Ssftrssololib_tlb::enumStatus InstanceStatus = {read = get_InstanceStatus, write = set_InstanceStatus};
  __property   short           LanguageCount = {read = get_LanguageCount, write = set_LanguageCount};
  __property   BSTR            LangName = {read = get_LangName, write = set_LangName};
  __property   BSTR            LangTLW = {read = get_LangTLW, write = set_LangTLW};
  __property   VARIANT_BOOL    LngAutoRec = {read = get_LngAutoRec, write = set_LngAutoRec};
  __property   long            MessageMode = {read = get_MessageMode, write = set_MessageMode};
  __property   short           PauseDuration = {read = get_PauseDuration, write = set_PauseDuration};
  __property   BSTR            PersistentFile = {read = get_PersistentFile, write = set_PersistentFile};
  __property   short           Pitch = {read = get_Pitch, write = set_Pitch};
  __property   BSTR            PP = {read = get_PP, write = set_PP};
  __property   short           PPCount = {read = get_PPCount, write = set_PPCount};
  __property   short           Rate = {read = get_Rate, write = set_Rate};
  __property   Ssftrssololib_tlb::enumReadMode ReadMode = {read = get_ReadMode, write = set_ReadMode};
  __property   short           RuleTableCount = {read = get_RuleTableCount, write = set_RuleTableCount};
  __property   short           SystemMode = {read = get_SystemMode, write = set_SystemMode};
  __property   BSTR            Voice = {read = get_Voice, write = set_Voice};
  __property   short           VoiceCount = {read = get_VoiceCount, write = set_VoiceCount};
  __property   short           Volume = {read = get_Volume, write = set_Volume};
};
typedef _DSsftRSSoloDispT<_DSsftRSSolo> _DSsftRSSoloDisp;

// *********************************************************************//
// DispIntf:  _DSsftRSSoloEvents
// Flags:     (4096) Dispatchable
// GUID:      {6FEF776C-4CC5-11D4-9521-0000F8092E73}
// *********************************************************************//
template <class T>
class _DSsftRSSoloEventsDispT : public TAutoDriver<_DSsftRSSoloEvents>
{
public:
  _DSsftRSSoloEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall WordMark(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen);
  void            __fastcall BeginProcess();
  void            __fastcall EndProcess();
  void            __fastcall TextUnit(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen);
  void            __fastcall Pause();
  void            __fastcall Stop();
  void            __fastcall Resume();
  void            __fastcall BookMark(long sID, long lSrcPos, long lDestPos);
  void            __fastcall Forward();
  void            __fastcall Backward();
  void            __fastcall PhonemeMark(short sPhoneme, long lSrcPos, long lSrcLen, long lDestPos, 
                                         long lDestLen);
  void            __fastcall Error(long lError);
  void            __fastcall LngChange(BSTR szLangName);

};
typedef _DSsftRSSoloEventsDispT<_DSsftRSSoloEvents> _DSsftRSSoloEventsDisp;

// *********************************************************************//
// DispIntf:  _DSsftRSSolo
// Flags:     (4112) Hidden Dispatchable
// GUID:      {6FEF776B-4CC5-11D4-9521-0000F8092E73}
// *********************************************************************//
template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_CommandSymbol(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CommandSymbol"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_CommandSymbol()
{
  _TDispID _dispid(*this, OLETEXT("CommandSymbol"), DISPID(13));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_DeviceId(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DeviceId"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_DeviceId()
{
  _TDispID _dispid(*this, OLETEXT("DeviceId"), DISPID(26));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_DictionaryCount(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DictionaryCount"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_DictionaryCount()
{
  _TDispID _dispid(*this, OLETEXT("DictionaryCount"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_DisableThrowError(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DisableThrowError"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_DisableThrowError()
{
  _TDispID _dispid(*this, OLETEXT("DisableThrowError"), DISPID(25));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_Engine(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Engine"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_Engine()
{
  _TDispID _dispid(*this, OLETEXT("Engine"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_EngineCount(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EngineCount"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_EngineCount()
{
  _TDispID _dispid(*this, OLETEXT("EngineCount"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_ErrorCode(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ErrorCode"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_ErrorCode()
{
  _TDispID _dispid(*this, OLETEXT("ErrorCode"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_ErrorMessage(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ErrorMessage"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_ErrorMessage()
{
  _TDispID _dispid(*this, OLETEXT("ErrorMessage"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_Frequency(Ssftrssololib_tlb::enumFrequency /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Frequency"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Ssftrssololib_tlb::enumFrequency /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Ssftrssololib_tlb::enumFrequency /*[VT_USERDEFINED:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_Frequency()
{
  _TDispID _dispid(*this, OLETEXT("Frequency"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Ssftrssololib_tlb::enumFrequency /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_InstanceStatus(Ssftrssololib_tlb::enumStatus /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("InstanceStatus"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Ssftrssololib_tlb::enumStatus /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Ssftrssololib_tlb::enumStatus /*[VT_USERDEFINED:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_InstanceStatus()
{
  _TDispID _dispid(*this, OLETEXT("InstanceStatus"), DISPID(23));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Ssftrssololib_tlb::enumStatus /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_LanguageCount(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LanguageCount"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_LanguageCount()
{
  _TDispID _dispid(*this, OLETEXT("LanguageCount"), DISPID(17));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_LangName(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LangName"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_LangName()
{
  _TDispID _dispid(*this, OLETEXT("LangName"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_LangTLW(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LangTLW"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_LangTLW()
{
  _TDispID _dispid(*this, OLETEXT("LangTLW"), DISPID(27));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_LngAutoRec(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LngAutoRec"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_LngAutoRec()
{
  _TDispID _dispid(*this, OLETEXT("LngAutoRec"), DISPID(14));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_MessageMode(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MessageMode"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_MessageMode()
{
  _TDispID _dispid(*this, OLETEXT("MessageMode"), DISPID(15));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_PauseDuration(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PauseDuration"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_PauseDuration()
{
  _TDispID _dispid(*this, OLETEXT("PauseDuration"), DISPID(12));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_PersistentFile(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PersistentFile"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_PersistentFile()
{
  _TDispID _dispid(*this, OLETEXT("PersistentFile"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_Pitch(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Pitch"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_Pitch()
{
  _TDispID _dispid(*this, OLETEXT("Pitch"), DISPID(9));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_PP(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PP"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_PP()
{
  _TDispID _dispid(*this, OLETEXT("PP"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_PPCount(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PPCount"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_PPCount()
{
  _TDispID _dispid(*this, OLETEXT("PPCount"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_Rate(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Rate"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_Rate()
{
  _TDispID _dispid(*this, OLETEXT("Rate"), DISPID(10));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_ReadMode(Ssftrssololib_tlb::enumReadMode /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ReadMode"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Ssftrssololib_tlb::enumReadMode /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Ssftrssololib_tlb::enumReadMode /*[VT_USERDEFINED:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_ReadMode()
{
  _TDispID _dispid(*this, OLETEXT("ReadMode"), DISPID(11));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Ssftrssololib_tlb::enumReadMode /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_RuleTableCount(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RuleTableCount"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_RuleTableCount()
{
  _TDispID _dispid(*this, OLETEXT("RuleTableCount"), DISPID(16));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_SystemMode(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SystemMode"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_SystemMode()
{
  _TDispID _dispid(*this, OLETEXT("SystemMode"), DISPID(18));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_Voice(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Voice"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_Voice()
{
  _TDispID _dispid(*this, OLETEXT("Voice"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_VoiceCount(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("VoiceCount"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_VoiceCount()
{
  _TDispID _dispid(*this, OLETEXT("VoiceCount"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::set_Volume(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Volume"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
_DSsftRSSoloDispT<T>::get_Volume()
{
  _TDispID _dispid(*this, OLETEXT("Volume"), DISPID(8));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DSsftRSSoloDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  OleProcedure(_dispid);
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::AddLicenseKey(BSTR pszLincenseKey)
{
  _TDispID _dispid(*this, OLETEXT("AddLicenseKey"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = pszLincenseKey /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::Backward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue)
{
  _TDispID _dispid(*this, OLETEXT("Backward"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (int)sJmpMode /*[VT_USERDEFINED:0]*/;
  _args[2] = lJmpValue /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::Forward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue)
{
  _TDispID _dispid(*this, OLETEXT("Forward"), DISPID(36));
  TAutoArgs<2> _args;
  _args[1] = (int)sJmpMode /*[VT_USERDEFINED:0]*/;
  _args[2] = lJmpValue /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::GeneratePcmBuff(BSTR pszInText, Ssftrssololib_tlb::enumTextFormat sTextFormat
                                      , short sPCMFormat)
{
  _TDispID _dispid(*this, OLETEXT("GeneratePcmBuff"), DISPID(55));
  TAutoArgs<3> _args;
  _args[1] = pszInText /*[VT_BSTR:0]*/;
  _args[2] = (int)sTextFormat /*[VT_USERDEFINED:0]*/;
  _args[3] = sPCMFormat /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::GeneratePcmFile(BSTR pszInText, short sTextFormat, BSTR pszOutFile, 
                                      short sPCMFormat, Ssftrssololib_tlb::enumOutType sOutType)
{
  _TDispID _dispid(*this, OLETEXT("GeneratePcmFile"), DISPID(31));
  TAutoArgs<5> _args;
  _args[1] = pszInText /*[VT_BSTR:0]*/;
  _args[2] = sTextFormat /*[VT_I2:0]*/;
  _args[3] = pszOutFile /*[VT_BSTR:0]*/;
  _args[4] = sPCMFormat /*[VT_I2:0]*/;
  _args[5] = (int)sOutType /*[VT_USERDEFINED:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetDictionaryPathName(short sDictionaryIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetDictionaryPathName"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = sDictionaryIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetEngineName(long nEngineIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetEngineName"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = nEngineIndex /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetEngineVersion(long nEngineIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetEngineVersion"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = nEngineIndex /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetLanguageName(long nLanguageIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetLanguageName"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = nLanguageIndex /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetLanguageOfText(BSTR pszInText, 
                                        Ssftrssololib_tlb::enumTextFormat sTextFormat)
{
  _TDispID _dispid(*this, OLETEXT("GetLanguageOfText"), DISPID(45));
  TAutoArgs<2> _args;
  _args[1] = pszInText /*[VT_BSTR:0]*/;
  _args[2] = (int)sTextFormat /*[VT_USERDEFINED:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::GetNextPcm(VARIANT Buffer, long* plBufferLen, VARIANT_BOOL* pbLastBuffer, 
                                 VARIANT bNoTimer/*[opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextPcm"), DISPID(59));
  TAutoArgs<4> _args;
  _args[1] = Buffer /*[VT_VARIANT:0]*/;
  _args[2] = plBufferLen /*[VT_I4:1]*/;
  _args[3] = pbLastBuffer /*[VT_BOOL:1]*/;
  _args[4] = bNoTimer /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::GetNextPcmAndMarkers(VARIANT Buffer, long* plBufferLen, VARIANT Mrk, 
                                           long* plMarkerSize, VARIANT_BOOL* pbLastBuffer, 
                                           VARIANT bNoTimer/*[opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextPcmAndMarkers"), DISPID(61));
  TAutoArgs<6> _args;
  _args[1] = Buffer /*[VT_VARIANT:0]*/;
  _args[2] = plBufferLen /*[VT_I4:1]*/;
  _args[3] = Mrk /*[VT_VARIANT:0]*/;
  _args[4] = plMarkerSize /*[VT_I4:1]*/;
  _args[5] = pbLastBuffer /*[VT_BOOL:1]*/;
  _args[6] = bNoTimer /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::GetPersistentProperties()
{
  _TDispID _dispid(*this, OLETEXT("GetPersistentProperties"), DISPID(56));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetPPDescription(short sPPIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetPPDescription"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = sPPIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetPPManufacturer(short sPPIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetPPManufacturer"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = sPPIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetPPName(short sPPIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetPPName"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = sPPIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetPPVersion(short sPPIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetPPVersion"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = sPPIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetRuleTablePathName(short sRuleTableIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetRuleTablePathName"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = sRuleTableIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetVoiceAge(short sVoiceIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetVoiceAge"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = sVoiceIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetVoiceName(short sVoiceIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetVoiceName"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = sVoiceIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetVoiceVersion(short sVoiceIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetVoiceVersion"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = sVoiceIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSsftRSSoloDispT<T>::GetVoiceType(short sVoiceIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetVoiceType"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = sVoiceIndex /*[VT_I2:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::InitSpeech(BSTR szPath)
{
  _TDispID _dispid(*this, OLETEXT("InitSpeech"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = szPath /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::LoadDictionary(BSTR szDictionaryPathName)
{
  _TDispID _dispid(*this, OLETEXT("LoadDictionary"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = szDictionaryPathName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::LoadRuleTable(BSTR pszFileName)
{
  _TDispID _dispid(*this, OLETEXT("LoadRuleTable"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = pszFileName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::Pause()
{
  _TDispID _dispid(*this, OLETEXT("Pause"), DISPID(33));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::PersistProperties()
{
  _TDispID _dispid(*this, OLETEXT("PersistProperties"), DISPID(57));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::Resume()
{
  _TDispID _dispid(*this, OLETEXT("Resume"), DISPID(34));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::Speak(BSTR pszInText, Ssftrssololib_tlb::enumTextFormat sTextFormat)
{
  _TDispID _dispid(*this, OLETEXT("Speak"), DISPID(49));
  TAutoArgs<2> _args;
  _args[1] = pszInText /*[VT_BSTR:0]*/;
  _args[2] = (int)sTextFormat /*[VT_USERDEFINED:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(32));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::UnloadAllDictionaries()
{
  _TDispID _dispid(*this, OLETEXT("UnloadAllDictionaries"), DISPID(53));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::UnloadAllRuleTables()
{
  _TDispID _dispid(*this, OLETEXT("UnloadAllRuleTables"), DISPID(47));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::UnloadDictionary(BSTR szDictionaryPathName)
{
  _TDispID _dispid(*this, OLETEXT("UnloadDictionary"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = szDictionaryPathName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSsftRSSoloDispT<T>::UnloadRuleTable(BSTR pszFileName)
{
  _TDispID _dispid(*this, OLETEXT("UnloadRuleTable"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = pszFileName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DSsftRSSoloEvents
// Flags:     (4096) Dispatchable
// GUID:      {6FEF776C-4CC5-11D4-9521-0000F8092E73}
// *********************************************************************//
template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::WordMark(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
{
  _TDispID _dispid(/* WordMark */ DISPID(1));
  TAutoArgs<4> _args;
  _args[1] = lSrcPos /*[VT_I4:0]*/;
  _args[2] = lSrcLen /*[VT_I4:0]*/;
  _args[3] = lDestPos /*[VT_I4:0]*/;
  _args[4] = lDestLen /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::BeginProcess()
{
  _TDispID _dispid(/* BeginProcess */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::EndProcess()
{
  _TDispID _dispid(/* EndProcess */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::TextUnit(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
{
  _TDispID _dispid(/* TextUnit */ DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = lSrcPos /*[VT_I4:0]*/;
  _args[2] = lSrcLen /*[VT_I4:0]*/;
  _args[3] = lDestPos /*[VT_I4:0]*/;
  _args[4] = lDestLen /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::Pause()
{
  _TDispID _dispid(/* Pause */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::Stop()
{
  _TDispID _dispid(/* Stop */ DISPID(6));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::Resume()
{
  _TDispID _dispid(/* Resume */ DISPID(7));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::BookMark(long sID, long lSrcPos, long lDestPos)
{
  _TDispID _dispid(/* BookMark */ DISPID(8));
  TAutoArgs<3> _args;
  _args[1] = sID /*[VT_I4:0]*/;
  _args[2] = lSrcPos /*[VT_I4:0]*/;
  _args[3] = lDestPos /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::Forward()
{
  _TDispID _dispid(/* Forward */ DISPID(9));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::Backward()
{
  _TDispID _dispid(/* Backward */ DISPID(10));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::PhonemeMark(short sPhoneme, long lSrcPos, long lSrcLen, long lDestPos, 
                                        long lDestLen)
{
  _TDispID _dispid(/* PhonemeMark */ DISPID(11));
  TAutoArgs<5> _args;
  _args[1] = sPhoneme /*[VT_I2:0]*/;
  _args[2] = lSrcPos /*[VT_I4:0]*/;
  _args[3] = lSrcLen /*[VT_I4:0]*/;
  _args[4] = lDestPos /*[VT_I4:0]*/;
  _args[5] = lDestLen /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::Error(long lError)
{
  _TDispID _dispid(/* Error */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = lError /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DSsftRSSoloEventsDispT<T>::LngChange(BSTR szLangName)
{
  _TDispID _dispid(/* LngChange */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = szLangName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SsftRSSoloA
// Event Interface : _DSsftRSSoloEvents
// *********************************************************************//
template <class T>
class TEvents_SsftRSSoloA : public IConnectionPointImpl<T,
                                                 &DIID__DSsftRSSoloEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_WordMark(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen);
  void            Fire_BeginProcess(void);
  void            Fire_EndProcess(void);
  void            Fire_TextUnit(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen);
  void            Fire_Pause(void);
  void            Fire_Stop(void);
  void            Fire_Resume(void);
  void            Fire_BookMark(long sID, long lSrcPos, long lDestPos);
  void            Fire_Forward(void);
  void            Fire_Backward(void);
  void            Fire_PhonemeMark(short sPhoneme, long lSrcPos, long lSrcLen, long lDestPos, 
                                   long lDestLen);
  void            Fire_Error(long lError);
  void            Fire_LngChange(BSTR szLangName);
protected:
  _DSsftRSSoloEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_WordMark(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WordMark(lSrcPos, lSrcLen, lDestPos, lDestLen);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_BeginProcess(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeginProcess();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_EndProcess(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EndProcess();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_TextUnit(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.TextUnit(lSrcPos, lSrcLen, lDestPos, lDestLen);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_Pause(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Pause();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_Stop(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Stop();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_Resume(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Resume();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_BookMark(long sID, long lSrcPos, long lDestPos)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BookMark(sID, lSrcPos, lDestPos);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_Forward(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Forward();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_Backward(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Backward();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_PhonemeMark(short sPhoneme, long lSrcPos, long lSrcLen, long lDestPos, 
                                         long lDestLen)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PhonemeMark(sPhoneme, lSrcPos, lSrcLen, lDestPos, lDestLen);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_Error(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SsftRSSoloA<T>::Fire_LngChange(BSTR szLangName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LngChange(szLangName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SsftRSSoloA
// Event Interface : _DSsftRSSoloEvents
// *********************************************************************//
template <typename T>
class ISsftRSSoloA_EventsDispatcher : public IUnknown
{
public:
  void Fire_WordMark(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.WordMark(lSrcPos, lSrcLen, lDestPos, lDestLen);
  }

  void Fire_BeginProcess(void)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.BeginProcess();
  }

  void Fire_EndProcess(void)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.EndProcess();
  }

  void Fire_TextUnit(long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.TextUnit(lSrcPos, lSrcLen, lDestPos, lDestLen);
  }

  void Fire_Pause(void)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Pause();
  }

  void Fire_Stop(void)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Stop();
  }

  void Fire_Resume(void)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Resume();
  }

  void Fire_BookMark(long sID, long lSrcPos, long lDestPos)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.BookMark(sID, lSrcPos, lDestPos);
  }

  void Fire_Forward(void)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Forward();
  }

  void Fire_Backward(void)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Backward();
  }

  void Fire_PhonemeMark(short sPhoneme, long lSrcPos, long lSrcLen, long lDestPos, long lDestLen)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.PhonemeMark(sPhoneme, lSrcPos, lSrcLen, lDestPos, lDestLen);
  }

  void Fire_Error(long lError)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Error(lError);
  }

  void Fire_LngChange(BSTR szLangName)
  {
    _DSsftRSSoloEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.LngChange(szLangName);
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Ssftrssololib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ssftrssololib_tlb;
#endif

#pragma option pop

#endif // SSFTRSSOLOLib_TLBH
