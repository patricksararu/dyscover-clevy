Release notes rSpeak SDK
Copyright © 2017 rSpeak Technologies.
Copyright © 2018, 2019, 2020 ReadSpeaker B.V.

Changes in release 1.2.9 (since release 1.2.7)

* Added engine support for DNN guided unit selection voices
  ("hybrid").

* Improved error handling on voice load failure. Also fixes an issue
  where a failed SSML voice switch would sometimes not be reported as
  intended via a failure event.

* CSV ("VoiceWare-compatible") lexicon support: Fixes muliple issues
  with the CSV parser where file format errors or non-LF-terminated
  files could cause (CSV) lexicon rules on the wrong format to be
  quietly ignored or, in some cases, cause a crash. Also updates
  handling of quoting and line breaks in the CSV parser to be more
  compatible with RFC4180.

* CSV ("VoiceWare-compatible") lexicon support: CSV parse errors are
  now treated as errors rather than quietly ignored, and error
  messages from loading a CSV lexicon also distinguish between file
  format errors and other types of errors.

* Minor improvements to normalization and disambiguation for Arabic
  (ar_arb).

* Minor improvemetns to normalization for German (de_de) and Polish
  (pl_pl).

* Improved normalization and handling of compounds for Latvian (lv_lv).

* Lexicon adjustments/additions for Arabic (ar_arb), Dutch (nl_be,
  nl_nl), English (en_au, en_gb, en_us), Finnish (fi_fi), French
  (fr_fr), German (de_de), Latvian (lv_lv), Polish (pl_pl) and Swedish
  (sv_se); as well as for English words included for foreign word
  pronunciation in non-English languages.

* Accepts some alternate IPA symbols for representing approximant r in
  French (fr_fr).

* SSML voice element: Fixed an issue that would cause 8 bit linear WAV
  to play at almost inaudible volume. Fixes some URI/path handling
  issues when including local files via "file:" URIs, in particular on
  Windows platforms.

* Fixes an issue on some platforms that could cause the TZ environment
  variable to be modified when a license is loaded.

* Minor update to included sample C program, to demonstrate setting
  license file path.


Changes in release 1.2.7 (since release 1.2.6)

* API: A new SynthesizeEnd event has been added. If enabled by the
  event mask, this event is trigged at the end of a rsttsSynthesize()
  or rsttsSynthesizeAsync() call, essentially immediately before it
  returns, to indicate its final result status. This is useful to get
  a end indication and retrieve a final status and error message from
  rsttsSynthesizeAsync(). (Note, stopping the instance with
  rsttsStop() or rsttsSetStatus() inhibits any subsequent events from
  the call being stopped, including this event.)

* API: Added parameter RSTTS_PARAM_AUDIO_REALTIME_PCT to set a speed
  limit for an instance, as a percentage of realtime (set to 0 for
  maximum speed, 100 for realtime speed). This setting is used to
  throttle the speech generation speed if/when maximum speed is not
  desired. (The maximum realtime factor permitted by the license, if
  any, always applies regardless of this setting.)

* Java wrapper: Support added for the SynthesizeEnd event, see above.

* Performance improvements, notably even quicker loading of huge user
  lexicon files.

* Improved input handling for the "autossml" input text format
  (compatibility text format for handling plain text with inserted
  SSML fragments).

* Multiple improvements to normalization, disambiguation and
  decompounding for Latvian (lv_lv)

* Fixes for normalization of numbers, in particular for Arabic
  (ar_arb) and Norwegian bokmål (nb_no) and Polish (pl_pl).

* Improved normalization of days and dates for Arabic (ar_arb).

* Fix for a bug in 1.2.6 that caused the Flemish (nl_be) voice Veerle
  to also require on the Dutch (nl_nl) data files to be installed.

* Improved handling of question intonation for Finnish (fi_fi)

* Documentation improvements, in particular regarding the
  SynthesizeEnd event and status reported from rsttsSynthesize() and
  rsttsSynthesizeAsync().


Changes in release 1.2.6 (since release 1.2.3)

* Added language: Flemish (nl_be)

* Added voice: Veerle (nl_be)

* 32-bit MacOS (platform i386-apple-darwin) is no longer supported.
  (The last release supporting this platform is 1.2.3.)

* Minor improvements to disambiguation and pronunciation for Arabic (ar_arb)

* Minor liaison rule improvements for French (fr_fr)

* Improved normalization and compound word pronunciation for Latvian (lv_lv)

* Lexicon updates for Arabic (ar_arb), Dutch (nl_nl), German (de_de),
  Polish (pl_pl), Swedish (sv_se)

* Loading a user lexicon with many entries is now significantly faster.

* Enhanced licensing functionality for Android platforms


Changes in release 1.2.3 (since release 1.2.0)

* Added language: Latvian (lv_lv)

* Added voice: Oskars (lv_lv)

* Minor normalization improvements for Danish (da_dk), Dutch (nl_nl),
  English (en_au, en_gb, en_us), Finnish (fi_fi), German (de_de),
  Italian (it_it), Norwegian Bokmål (nb_no), Polish (pl_pl), Spanish
  (es_es).

* Minor disambiguation improvements for Danish (da_dk), French
  (fr_fr), German (de_de), Swedish (sv_se).

* Minor lexicon and word lookup additions/corrections to various
  languages.

* Added support for spelling out letters from the greek alphabet in
  Polish text.

* Lexicon support: It is now permitted to insert empty lines within a
  rSpeak format lexicon file. (Such lines have no effect, but can be
  useful from a lexicon maintenance standpoint.)

* SSML support: Markup within an audio element (such as phoneme, mark
  and break elements) is now handled correctly; that is, ignored if
  the audio could be played, but otherwise processed as fallback
  content.

* Devanagari punctuation characters are now recognized by the engine
  as punctuation.

* Fixes an issue where attempting to read an input sentence in Arabic
  (ar_arb) containing no alphanumeric characters but only graphical
  symbols could cause a crash.

* Fixes an issue where attempting to stop a busy TTS instance (with
  rsttsSetState() or rsttsStop()) could, under certain conditions,
  cause the instance to lock up (and get stuck in the Stopping state)
  rather than release its resources (and transition to the Ready
  state).

* Fixes an issue where events could potentially be incorrectly
  positioned within a sentence.


Changes in release 1.2.0 (since release 1.1.0)

* Added languages: Danish (da_dk), Polish (pl_pl)

* Added voices: Lene (da_dk), Ania (pl_pl)

* API: Added parameter RSTTS_PARAM_TEXT_POSITION_INCLUDES_MARKUP,
  which, if enabled, events to count markup (ssml tags) as part of the
  text for position reporting purposes. (See rsttsSetParameter() in
  the API documentation.)

* API: Added new error code RSTTS_LANGUAGE_NOT_SET, which is now
  returned by API calls to indicate that an operation requires
  rsttsSetLanguage() to have been called on the instance beforehand,
  but that this wasn't done. This error code is returned when
  attempting to set a voice or to read plain text without first
  setting a language.

* API: Improved error messages when failing to load a license file.

* API: Improved error checking and reporting when loading a lexicon
  with rsttsLoadLexiconFromFile().

* Updated SDK acknowledgements file.

* Audio quality improvements and minor performance improvements

* Fixed a potential crash in Arabic (ar_arb).

* Fixed a synchronization issue which could cause the TTS to lock up
  in some circumstances on Android platforms.

* Pronunciation improvements in language independent components as
  well as specifically for for Arabic (ar_arb), British English
  (en_gb), French (fr_fr).

* Dictionary additions/adjustments for Arabic (ar_arb), Dutch (nl_nl),
  Finnish (fi_fi), French (fr_fr), German (de_de), Italian (it_it),
  Spanish (es_es), Swedish (sv_se), UK English (en_gb), US English
  (en_us)

* Normalization improvements for Arabic (ar_arb), Dutch (nl_nl),
  English (en_au, en_gb, en_us), Finnish (fi_fi), French
  (fr_fr), German (de_de), Italian (it_it), Norwegian Bokmål (nb_no),
  Spanish (es_es), Swedish (sv_se); in particular for the reading of
  numbers.

* For Finnish (fi_fi), the phoneme symbols "h:" and "ey" were removed
  (see the language specific phoneme map documentation).

* Java wrapper: New API functions getLanguageVersion(), getVoiceVersion()


Changes in release 1.1.0 (since bug fix release 1.0.2):

* Added languages: Arabic (ar_arb), Finnish (fi_fi)

* Added voices: Amir (ar_arb), Elina (fi_fi)

* Additions and some clarifications to the API documentation

* Decreased memory usage

* Responsiveness improvements

* Minor speech quality improvements

* New text format: "autossml". This format handles incomplete SSML
  and UTF-8 plain text with mixed-in SSML fragments.
  (rsttsSynthesize(), rsttsSynthesizeAsync())

* New API call rsttsGetLanguageVoiceVersion() (and associated macros
  RSTTS_LANGVOICEVER_MAJOR(), RSTTS_LANGVOICEVER_MINOR()) to request
  voice/language data version information.

* Additional data file version checks added when loading voice and
  language data. A new error code RSTTS_INTERNAL_FILE_VERSION_ERROR is
  used to report detected data file incompatibility errors.

* Improved error handling. In particular, errors on lexicon loading
  are now better detected and reported.

* The named rate/speed/pitch levels (used in SSML markup) are now
  customizable via rsttsSetParameter().

* New status codes have been added to librstts_error.h, for errors related
  to fetching/using external resources referred to by a document.

* The third ("where") parameter to rsttsLoadLexiconFromFile() was
  previously ignored (as only pre-parse lexicons were supported
  anyway), but is now used as documented, to determine to which stage
  a lexicon is loaded. The supported stages are RSTTS_PRE_MARKUP_PARSE
  and RSTTS_POST_MARKUP_PARSE, for lexicons to apply before and after
  the parsing of markup, respectively. (RSTTS_PRE_SSML_PARSE is now
  an alias of RSTTS_PRE_MARKUP_PARSE, for backwards compatibility.)
  Up to one lexicon may be loaded to each stage.

* Support for VoiceWare-compatible lexicons. These must have the
  filename suffix .csv or .CSV and be loaded to apply at the
  RSTTS_POST_MARKUP_PARSE stage.

* Support for VoiceWare-compatible transcriptions for some
  languages (specify phoneme alphabet "x-vw" when using from SSML).
  Supported for: Dutch, English (Australian), English (US), French,
  German, Italian, Spanish, Swedish.

* If an SSML phoneme element contains a transcription the engine
  cannot handle, the engine will now, as a fallback, read the contents
  within the element (if any).

* SSML extension: The prosody element now also accepts absolute,
  unit-less numeric prosody pitch values. These are interpreted as
  percentages of the normal pitch for the voice, not affected by
  surrounding markup.  (I.e. pitch="100" gives normal pitch.)

* Emphasis markup can now trig a variation in rate/pitch/volume to make
  the emphasized text stand out in a desired manner. (See the
  RSTTS_PARAM_MARKUP_EMPHASIS_* parameters to rsttsSetParameter().)

* Documents can now include .au and .wav files (via the SSML audio
  element), if this functionality is enabled. This is enabled and
  configured via the RSTTS_PARAM_URI_* parameters of rsttsSetParameter().
  Built-in sfx (paralinguistic sounds) can now also be disabled if desired.

* German (de_de) normalization: Now also considers the word "Billiarden"
  as numeric. 1:ens, 2:ens etc will now be read as erstens, zweitens etc

* Various minor normalization improvements

* Disambiguation improvements for Italian

* Minor disambiguation improvements for English and French


Changes in bug fix release 1.0.2 (since release 1.0):

* Some data was missing from viseme events, fixed.

* Fixes an issue where an end-of-sentence break could be generated
  at the wrong position under certain circumstances.

* Fixes an issue that could cause (non-critical) warning message
  to appear on stderr (Windows platforms only).


Changes in release 1.0 (since bug fix release 0.98a):

* Added language: Norwegian Bokmål (nb_no)

* Added voice: Lykke (nb_no)

* Various performance improvements

* Added an API call rsttsGetRuntimeVersion() to determine the
  version of the rSpeak lib in use.

* Added a C preprocessor symbol RSTTS_BUILDTIME_VERSION that can be
  used to do version checks at build time by the C preprocessor,
  for example to only include certain code if the header files
  indicate a particular rSpeak SDK version or later.
  Apps should only use this to check if certain functionality is
  available at build/compile time, otherwise use the API call above.

* Improved position reporting for word events generated from symbolic
  characters. When position tracking is enabled (the parameter
  RSTTS_PARAM_TEXT_POSITION_TRACKING), word events (RSTTSEvent_Word,
  if enabled by the current event mask) will also be able to report
  text positions of symbolic characters that get expanded into words
  during normalization.

* Improved position tracking with pre-parse lexicon in use:
  Reported positions refer (when possible) to positions before the
  lexicon was applied. (For optimal word position reporting, rules
  should preferably replace one word at a time, when words are
  replaced rather than just moved around; when multiple words are
  replaced at once by a rule, the algorithm will not try
  to match up matched words with substituted words in any (semi-)
  intelligent manner.)

* Language selection via rsttsSetLanguage() no longer pre-loads the
  default voice for that language. Use a subsequent call to any
  any of the rsttsSetVoice* functions if you want to pre-load a
  voice for improved responsiveness. (Otherwise, loading of a
  voice is deferred until the voice is actually needed.)

* Voice selection via rsttsSetVoiceByName(), rsttsSetVoiceByGender()
  now applies also to SSML. A thusly set current voice becomes the
  default voice for the language of that voice. (Explicit voice
  selection in SSML will still override if present.)

* The rsttsSet* API calls could under some circumstances return an
  error without setting an appropriate error message. Fixed.

* Correct handling of breaks without set strength

* Some missing strings in event callbacks could be represented as
  empty strings rather than NULL, as they should be according to the
  documentation if information is missing or not applicable to the
  event. This has been fixed.

* General voice improvements

* Various improvements to text normalization and homograph
  disambiguation.

* Improved error handling in license verification for Microsoft
  Windows-based platforms

* Minor updates to the documentation for rsttsGetErrorMessage() and
  rsttsFree().


Changes in bug fix release 0.98a (since release 0.98):

* Fixes minor memory management issues on Windows platforms

* Fixes a bug that could cause crashes on 32-bit Windows


Changes in release 0.98 (since release 0.97):

* Added language: Italian (it_it)

* Added voices: Benoit (fr_fr), Gina (it_it)

* Various improvements in error reporting, error messages and internal
  error handling

* New API functions rsttsGetPitch(), rsttsGetSpeed(), rsttsSetVolume()
  to retrieve the currently set pitch, speed and volume settings for a
  TTS instance.

* New API function rsttsGetSampleRate() to retrieve the currently set
  output sample rate for a TTS instance.

* New API functions rsttsLoadLexiconFromFile(), rsttsUnloadLexicon()
  to load a lexicon into a TTS instance, and unload a loaded lexicon,
  respectively.

* The quality setting constants RSTTS_QUALITY_FAST and
  RSTTS_QUALITY_FULL (for use with rsttsSetParameter()) are now
  deprecated. Use RSTTS_QUALITY_LOW and RSTTS_QUALITY_NORMAL instead.

* The API function rsttsSetParameter() can now configure a new
  parameter RSTTS_PARAM_RESPONSIVENESS_SETTING (the associated
  constants RSTTS_RESPONSIVENESS_NORMAL and RSTTS_RESPONSIVENESS_FAST
  have also been added to the API). This parameter enables some
  tradeoffs and voice loading strategies that may enable
  rsttsSynthesize() and rsttsSynthesizeAsync() to start returning
  audio quicker, at some costs in speech quality and use of system
  resources. This can be useful in applications where low delays are
  more important than overall speed and quality. See the documentation
  of rsttsSetParameter() for more information.

* It is now possible to configure the default length of pauses
  generated by punctuation and SSML break elements, using
  rsttsSetParameter() with any of the following parameter names:
  RSTTS_PARAM_PUNCTUATION_PAUSE_MS, RSTTS_PARAM_SENTENCE_PAUSE_MS,
  RSTTS_PARAM_X_WEAK_BREAK_PAUSE_MS, RSTTS_PARAM_WEAK_BREAK_PAUSE_MS,
  RSTTS_PARAM_MEDIUM_BREAK_PAUSE_MS,
  RSTTS_PARAM_STRONG_BREAK_PAUSE_MS,
  RSTTS_PARAM_X_STRONG_BREAK_PAUSE_MS,
  RSTTS_PARAM_MAX_BREAK_PAUSE_MS. See the documentation of
  rsttsSetParameter() for more information.

* rsttsGetErrorMessage() and rsttsGetErrorCodeString() from now on
  always return a valid utf-8 string, never NULL.

* Calling rsttsSetSampleRate() on a busy TTS instance is now safe
  (sample rate modifications on a busy instance are now allowed but
  will not take effect until the TTS instance is no longer busy).

* In the previous release, rsttsWaitState() had a synchronization
  error where a timeout could cause the TTS instance to lock up. This
  has been fixed.

* Fixed reporting of positions for word (RSTTSEvent_Word) and sentence
  (RSTTSEvent_Sentence) events. When the parameter
  RSTTS_PARAM_TEXT_POSITION_TRACKING is enabled, positions are now
  also reported for transcriptions (SSML phoneme elements, which are
  reported as RSTTSEvent_Word events, when such events are enabled by
  the current event mask), and start and end positions for sentences
  (RSTTSEvent_Sentence) are also more accurately reported (when
  enabled by the current event mask).

* Improved reporting of break events (RSTTSEvent_Break). The prosodic
  strength of breaks (according to the levels defined in the SSML
  spec) is now included in the break event information. Break events,
  if enabled by the current event mask, are now generated for all
  prosodic breaks and pauses which have a length greater than zero
  (0ms) and/or a prosodic strength greater than "none".

* The TTS engine now supports Failure events, which will be reported
  via the event callback for certain runtime errors, in particular for
  non-critical errors that allow synthesis to continue, such as
  non-critical SSML parse failures/warnings, errors in transcriptions
  and language switch failures. See the documentation and the
  declarations in librstts_events.h for more information. Note that
  failure events are enabled per default.

* Voice audio data is now stored in a different format and uses .opu
  files rather than .vor files. The data files provided with this
  release are not compatible with those of previous releases.

* General voice improvements.

* Various improvements to text normalization and homograph
  disambiguation.

* Improved API documentation.
