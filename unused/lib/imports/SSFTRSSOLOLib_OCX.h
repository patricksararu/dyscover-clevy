// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 2-6-2016 16:17:31 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\Clevy Dyscover\speech\components\common\ssftrssolo.ocx (1)
// LIBID: {6FEF776A-4CC5-11D4-9521-0000F8092E73}
// LCID: 0
// Helpfile: 
// HelpString: ScanSoft RealSpeak Solo ActiveX Control module
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   SSFTRSSOLOLib_OCXH
#define   SSFTRSSOLOLib_OCXH

#pragma option push -b -a4 -w-inl -w-8118

#include <olectrls.hpp>
#include <oleserver.hpp>
#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <StdVCL.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "SSFTRSSOLOLib_TLB.h"
namespace Ssftrssololib_tlb
{

// *********************************************************************//
// HelpString: ScanSoft RealSpeak Solo ActiveX Control module
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSsftRSSoloA
// Help String      : ScanSoft RealSpeak Solo ActiveX Control
// Default Interface: _DSsftRSSolo
// Def. Intf. Object: _DSsftRSSoloDisp
// Def. Intf. DISP? : Yes
// Event   Interface: _DSsftRSSoloEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
typedef void __fastcall (__closure * TSsftRSSoloAWordMark)(System::TObject * Sender, 
                                                           long lSrcPos, long lSrcLen, long lDestPos, 
                                                           long lDestLen);
typedef void __fastcall (__closure * TSsftRSSoloATextUnit)(System::TObject * Sender, 
                                                           long lSrcPos, long lSrcLen, long lDestPos, 
                                                           long lDestLen);
typedef void __fastcall (__closure * TSsftRSSoloABookMark)(System::TObject * Sender, 
                                                           long sID, long lSrcPos, long lDestPos);
typedef void __fastcall (__closure * TSsftRSSoloAPhonemeMark)(System::TObject * Sender, 
                                                              short sPhoneme, long lSrcPos, 
                                                              long lSrcLen, long lDestPos, 
                                                              long lDestLen);
typedef void __fastcall (__closure * TSsftRSSoloAError)(System::TObject * Sender, 
                                                        long lError);
typedef void __fastcall (__closure * TSsftRSSoloALngChange)(System::TObject * Sender, 
                                                            BSTR szLangName);
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host ScanSoft RealSpeak Solo ActiveX Control in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TSsftRSSoloA : public Vcl::Olectrls::TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //
  TSsftRSSoloAWordMark           FOnWordMark;
  System::Classes::TNotifyEvent  FOnBeginProcess;
  System::Classes::TNotifyEvent  FOnEndProcess;
  TSsftRSSoloATextUnit           FOnTextUnit;
  System::Classes::TNotifyEvent  FOnPause;
  System::Classes::TNotifyEvent  FOnStop;
  System::Classes::TNotifyEvent  FOnResume;
  TSsftRSSoloABookMark           FOnBookMark;
  System::Classes::TNotifyEvent  FOnForward;
  System::Classes::TNotifyEvent  FOnBackward;
  TSsftRSSoloAPhonemeMark        FOnPhonemeMark;
  TSsftRSSoloAError              FOnError;
  TSsftRSSoloALngChange          FOnLngChange;

  // Default Interace of OCX
  //
  _DSsftRSSoloDisp m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //

  // Static variables used by all instances of OCX proxy
  //
  static int          EventDispIDs[13];
  static Vcl::Olectrls::TControlData2 CControlData;
  static GUID          CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  _DSsftRSSoloDisp __fastcall GetDefaultInterface();
  _DSsftRSSoloDisp __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TSsftRSSoloA(System::Classes::TComponent* AOwner) : Vcl::Olectrls::TOleControl(AOwner)
  {};
  virtual  __fastcall TSsftRSSoloA(HWND        Parent) : Vcl::Olectrls::TOleControl(Parent)
  {};

  // OCX methods
  //
  void            __fastcall AboutBox(void);
  long            __fastcall AddLicenseKey(BSTR pszLincenseKey);
  long            __fastcall Backward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue);
  long            __fastcall Forward(Ssftrssololib_tlb::enumJmpMode sJmpMode, long lJmpValue);
  long            __fastcall GeneratePcmBuff(BSTR pszInText, 
                                             Ssftrssololib_tlb::enumTextFormat sTextFormat, 
                                             short sPCMFormat);
  long            __fastcall GeneratePcmFile(BSTR pszInText, short sTextFormat, BSTR pszOutFile, 
                                             short sPCMFormat, 
                                             Ssftrssololib_tlb::enumOutType sOutType);
  BSTR            __fastcall GetDictionaryPathName(short sDictionaryIndex);
  BSTR            __fastcall GetEngineName(long nEngineIndex);
  BSTR            __fastcall GetEngineVersion(long nEngineIndex);
  BSTR            __fastcall GetLanguageName(long nLanguageIndex);
  BSTR            __fastcall GetLanguageOfText(BSTR pszInText, 
                                               Ssftrssololib_tlb::enumTextFormat sTextFormat);
  long            __fastcall GetNextPcm(VARIANT Buffer, long* plBufferLen, 
                                        VARIANT_BOOL* pbLastBuffer, 
                                        VARIANT bNoTimer/*[opt]*/= TNoParam());
  long            __fastcall GetNextPcmAndMarkers(VARIANT Buffer, long* plBufferLen, VARIANT Mrk, 
                                                  long* plMarkerSize, VARIANT_BOOL* pbLastBuffer, 
                                                  VARIANT bNoTimer/*[opt]*/= TNoParam());
  long            __fastcall GetPersistentProperties(void);
  BSTR            __fastcall GetPPDescription(short sPPIndex);
  BSTR            __fastcall GetPPManufacturer(short sPPIndex);
  BSTR            __fastcall GetPPName(short sPPIndex);
  BSTR            __fastcall GetPPVersion(short sPPIndex);
  BSTR            __fastcall GetRuleTablePathName(short sRuleTableIndex);
  BSTR            __fastcall GetVoiceAge(short sVoiceIndex);
  BSTR            __fastcall GetVoiceName(short sVoiceIndex);
  BSTR            __fastcall GetVoiceVersion(short sVoiceIndex);
  BSTR            __fastcall GetVoiceType(short sVoiceIndex);
  long            __fastcall InitSpeech(BSTR szPath);
  long            __fastcall LoadDictionary(BSTR szDictionaryPathName);
  long            __fastcall LoadRuleTable(BSTR pszFileName);
  long            __fastcall Pause(void);
  long            __fastcall PersistProperties(void);
  long            __fastcall Resume(void);
  long            __fastcall Speak(BSTR pszInText, Ssftrssololib_tlb::enumTextFormat sTextFormat);
  long            __fastcall Stop(void);
  long            __fastcall UnloadAllDictionaries(void);
  long            __fastcall UnloadAllRuleTables(void);
  long            __fastcall UnloadDictionary(BSTR szDictionaryPathName);
  long            __fastcall UnloadRuleTable(BSTR pszFileName);

  // OCX properties
  //
  __property _DSsftRSSoloDisp ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //

  // OCX properties
  //
  __property short CommandSymbol={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=13 };
  __property int DeviceId={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=26 };
  __property short DictionaryCount={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=21 };
  __property bool DisableThrowError={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=25 };
  __property System::WideString Engine={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=19 };
  __property int EngineCount={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=1 };
  __property int ErrorCode={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=2 };
  __property System::WideString ErrorMessage={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=3 };
  __property Winapi::Activex::TOleEnum Frequency={ read=GetTOleEnumProp, write=SetTOleEnumProp, stored=false, index=4 };
  __property Winapi::Activex::TOleEnum InstanceStatus={ read=GetTOleEnumProp, write=SetTOleEnumProp, stored=false, index=23 };
  __property short LanguageCount={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=17 };
  __property System::WideString LangName={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=24 };
  __property System::WideString LangTLW={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=27 };
  __property bool LngAutoRec={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=14 };
  __property int MessageMode={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=15 };
  __property short PauseDuration={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=12 };
  __property System::WideString PersistentFile={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=22 };
  __property short Pitch={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=9 };
  __property System::WideString PP={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=20 };
  __property short PPCount={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=6 };
  __property short Rate={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=10 };
  __property Winapi::Activex::TOleEnum ReadMode={ read=GetTOleEnumProp, write=SetTOleEnumProp, stored=false, index=11 };
  __property short RuleTableCount={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=16 };
  __property short SystemMode={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=18 };
  __property System::WideString Voice={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=7 };
  __property short VoiceCount={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=5 };
  __property short Volume={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=8 };

  // OCX Events
  //
  __property TSsftRSSoloAWordMark OnWordMark={ read=FOnWordMark, write=FOnWordMark };
  __property System::Classes::TNotifyEvent OnBeginProcess={ read=FOnBeginProcess, write=FOnBeginProcess };
  __property System::Classes::TNotifyEvent OnEndProcess={ read=FOnEndProcess, write=FOnEndProcess };
  __property TSsftRSSoloATextUnit OnTextUnit={ read=FOnTextUnit, write=FOnTextUnit };
  __property System::Classes::TNotifyEvent OnPause={ read=FOnPause, write=FOnPause };
  __property System::Classes::TNotifyEvent OnStop={ read=FOnStop, write=FOnStop };
  __property System::Classes::TNotifyEvent OnResume={ read=FOnResume, write=FOnResume };
  __property TSsftRSSoloABookMark OnBookMark={ read=FOnBookMark, write=FOnBookMark };
  __property System::Classes::TNotifyEvent OnForward={ read=FOnForward, write=FOnForward };
  __property System::Classes::TNotifyEvent OnBackward={ read=FOnBackward, write=FOnBackward };
  __property TSsftRSSoloAPhonemeMark OnPhonemeMark={ read=FOnPhonemeMark, write=FOnPhonemeMark };
  __property TSsftRSSoloAError OnError={ read=FOnError, write=FOnError };
  __property TSsftRSSoloALngChange OnLngChange={ read=FOnLngChange, write=FOnLngChange };
};
typedef TSsftRSSoloA  TSsftRSSoloAProxy;

};     // namespace Ssftrssololib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ssftrssololib_tlb;
#endif

#pragma option pop

#endif // SSFTRSSOLOLib_OCXH
